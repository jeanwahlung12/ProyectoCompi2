/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Compilador;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erick Martinez y Jean WahPulm√≥n
 */
public class InterfazComp extends javax.swing.JFrame {

    File arch;
    static ArrayList<Tipo> tipos = new ArrayList();
    static ArrayList<Funcion> funciones = new ArrayList();
    static ArrayList<Tupla> tuplas = new ArrayList();
    static ArrayList<Cuadruplo> cuadruplos = new ArrayList<Cuadruplo>();
    static ArrayList<Tcontrol> tcontrol = new ArrayList();
    static ArrayList<String> tup_msg = new ArrayList();
    static ArrayList<Tcontrol> eses = new ArrayList();

    /**
     * Creates new form InterfazComp
     */
    NumeroLinea numeroLinea;
    public InterfazComp() {
        initComponents();
        setLocationRelativeTo(null);
        jLabel5.setVisible(true);
        numeroLinea = new NumeroLinea(JT_prueba); 
        jScrollPane8.setRowHeaderView(numeroLinea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        L_Archivo = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        L_arch = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JT_errores = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JT_cargar = new javax.swing.JButton();
        JB_abrirenlace = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        JB_guardar = new javax.swing.JButton();
        JB_ejecutar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        JT_codigofinal = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        JT_prueba = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_salida = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        JT_cuadruplos = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        JT_funciones = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        JT_tipos = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto Compiladores");
        setBackground(new java.awt.Color(153, 153, 255));
        setForeground(new java.awt.Color(255, 51, 102));
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setText("Mini-C ");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText("Archivo Actual:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Archivo De Prueba");

        L_arch.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        L_arch.setText("- - - - -");

        JT_errores.setEditable(false);
        JT_errores.setColumns(20);
        JT_errores.setFont(new java.awt.Font("DialogInput", 0, 16)); // NOI18N
        JT_errores.setRows(5);
        jScrollPane2.setViewportView(JT_errores);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Consola");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compilador/computadora-y-ordenador-imagen-animada-0178 (1).gif"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        JT_cargar.setBackground(new java.awt.Color(153, 204, 255));
        JT_cargar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        JT_cargar.setText("Cargar");
        JT_cargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_cargarMouseClicked(evt);
            }
        });
        JT_cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JT_cargarActionPerformed(evt);
            }
        });

        JB_abrirenlace.setBackground(new java.awt.Color(153, 204, 255));
        JB_abrirenlace.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        JB_abrirenlace.setText("Abrir Graficador");
        JB_abrirenlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_abrirenlaceActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Compilador/Captura-removebg-preview (1).png"))); // NOI18N

        JB_guardar.setBackground(new java.awt.Color(153, 204, 255));
        JB_guardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        JB_guardar.setText("Guardar");
        JB_guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JB_guardarMouseClicked(evt);
            }
        });
        JB_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_guardarActionPerformed(evt);
            }
        });

        JB_ejecutar.setBackground(new java.awt.Color(153, 204, 255));
        JB_ejecutar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        JB_ejecutar.setText("Compilar");
        JB_ejecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JB_ejecutarMouseClicked(evt);
            }
        });
        JB_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_ejecutarActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Codigo Final");

        JT_codigofinal.setColumns(20);
        JT_codigofinal.setFont(new java.awt.Font("DialogInput", 0, 16)); // NOI18N
        JT_codigofinal.setRows(5);
        jScrollPane4.setViewportView(JT_codigofinal);

        JT_prueba.setColumns(20);
        JT_prueba.setFont(new java.awt.Font("DialogInput", 0, 16)); // NOI18N
        JT_prueba.setRows(5);
        jScrollPane3.setViewportView(JT_prueba);

        jScrollPane8.setViewportView(jScrollPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(L_arch, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(79, 79, 79))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(89, 89, 89))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(JT_cargar, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(JB_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(JB_abrirenlace))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 36, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(JB_ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JB_ejecutar)
                        .addGap(24, 24, 24)
                        .addComponent(JT_cargar)
                        .addGap(18, 18, 18)
                        .addComponent(JB_guardar)
                        .addGap(18, 18, 18)
                        .addComponent(JB_abrirenlace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L_arch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab("Main", jPanel1);

        JT_salida.setEditable(false);
        JT_salida.setColumns(20);
        JT_salida.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        JT_salida.setRows(5);
        jScrollPane1.setViewportView(JT_salida);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Arbol");

        JT_cuadruplos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        JT_cuadruplos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        JT_cuadruplos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Op", "Arg 1", "Arg 2", "Res"
            }
        ));
        JT_cuadruplos.setOpaque(false);
        JT_cuadruplos.setShowHorizontalLines(false);
        jScrollPane6.setViewportView(JT_cuadruplos);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Tipos");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("Cuadruplos");

        JT_funciones.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        JT_funciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "ID", "Clasificaci√≥n", "Parametros"
            }
        ));
        jScrollPane7.setViewportView(JT_funciones);

        JT_tipos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        JT_tipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "ID", "funcion", "Offset"
            }
        ));
        jScrollPane5.setViewportView(JT_tipos);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Funciones");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(161, 161, 161)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(198, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tablas", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(L_Archivo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(L_Archivo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JB_guardarMouseClicked
        try {
            try (FileWriter guardado = new FileWriter(arch)) {
                guardado.write(JT_prueba.getText());
                JOptionPane.showMessageDialog(rootPane, "El archivo fue guardado con √©xito en la ruta establecida");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_JB_guardarMouseClicked

    private void JB_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_ejecutarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JB_ejecutarActionPerformed

    private void JB_ejecutarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JB_ejecutarMouseClicked
        JT_salida.setText("");
        JT_errores.setText("");
        JT_codigofinal.setText("");
        String s;
        JT_errores.setText("");
        if (arch == null) {
            JOptionPane.showMessageDialog(rootPane, "No hay archivo de texto cargado");
        } else {
            try {
                try (FileWriter guardado = new FileWriter(arch)) {
                    guardado.write(JT_prueba.getText());
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            try {
                compi c = new compi(new FileReader(arch));
                Analizador a = new Analizador(c);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                PrintStream ps = new PrintStream(baos);
                PrintStream old = System.out;
                System.setOut(ps);
                a.parse();
                System.out.flush();
                System.setOut(old);
                s = baos.toString();
                JT_errores.append(s);
                File archivosalida = new File("src/Compilador/AFT.txt");
                try {
                    BufferedReader leer = new BufferedReader(new FileReader(archivosalida));
                    String linea = leer.readLine();
                    while (linea != null) {
                        JT_salida.append(linea + "\n");
                        linea = leer.readLine();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(InterfazComp.class.getName()).log(Level.SEVERE, null, ex);
                }
                tablas(JT_salida.getText());
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_JB_ejecutarMouseClicked

    private void JT_cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JT_cargarActionPerformed
        JT_prueba.setText("");
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(this);
        arch = file.getSelectedFile();
        L_arch.setText(arch.getName());
        try {
            BufferedReader leer = new BufferedReader(new FileReader(arch));
            String linea = leer.readLine();
            while (linea != null) {
                JT_prueba.append(linea + "\n");
                linea = leer.readLine();
            }
        } catch (Exception ex) {
            Logger.getLogger(InterfazComp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JT_cargarActionPerformed

    private void JB_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_guardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JB_guardarActionPerformed

    private void JB_abrirenlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_abrirenlaceActionPerformed
        if (java.awt.Desktop.isDesktopSupported()) {
            java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
            if (desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
                try {
                    java.net.URI uri = new java.net.URI("https://dreampuf.github.io/GraphvizOnline/#digraph%20G%20%7B%0A%0A%20%20subgraph%20cluster_0%20%7B%0A%20%20%20%20style%3Dfilled%3B%0A%20%20%20%20color%3Dlightgrey%3B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%2Ccolor%3Dwhite%5D%3B%0A%20%20%20%20a0%20-%3E%20a1%20-%3E%20a2%20-%3E%20a3%3B%0A%20%20%20%20label%20%3D%20%22process%20%231%22%3B%0A%20%20%7D%0A%0A%20%20subgraph%20cluster_1%20%7B%0A%20%20%20%20node%20%5Bstyle%3Dfilled%5D%3B%0A%20%20%20%20b0%20-%3E%20b1%20-%3E%20b2%20-%3E%20b3%3B%0A%20%20%20%20label%20%3D%20%22process%20%232%22%3B%0A%20%20%20%20color%3Dblue%0A%20%20%7D%0A%20%20start%20-%3E%20a0%3B%0A%20%20start%20-%3E%20b0%3B%0A%20%20a1%20-%3E%20b3%3B%0A%20%20b2%20-%3E%20a3%3B%0A%20%20a3%20-%3E%20a0%3B%0A%20%20a3%20-%3E%20end%3B%0A%20%20b3%20-%3E%20end%3B%0A%0A%20%20start%20%5Bshape%3DMdiamond%5D%3B%0A%20%20end%20%5Bshape%3DMsquare%5D%3B%0A%7D");
                    desktop.browse(uri);
                } catch (URISyntaxException | IOException ex) {
                }
            }
        }
    }//GEN-LAST:event_JB_abrirenlaceActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        jLabel5.setVisible(true);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void JT_cargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_cargarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_JT_cargarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazComp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazComp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazComp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazComp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazComp().setVisible(true);
            }
        });
    }

   public static void crear(String ruta) {
        File file = new File(ruta);
        jflex.Main.generate(file);
    }

    public void existe_func(Funcion f) {
        for (int i = 0; i < funciones.size(); i++) {
            if (funciones.get(i).getId().equals(f.getId())) {
                if (!f.getTipo().equals(funciones.get(i).getTipo())) {
                    JT_errores.append("Error! La funcion \"" + funciones.get(i).getId() + "\" tiene distinto tipo.\n");
                } else {
                    if (funciones.get(i).getClasificacion().equals(f.getClasificacion())) {
                        JT_errores.append("Error! La funcion \"" + funciones.get(i).getId() + "\" ya existe.\n");
                    } else {
                        if (funciones.get(i).getParametros().size() == f.getParametros().size()) {
                            for (int j = 0; j < f.getParametros().size(); j++) {
                                if (!funciones.get(i).getParametros().get(j).getTipo().equals(f.getParametros().get(j).getTipo())) {
                                    JT_errores.append("Error! Distintos tipos de parametros en las funciones \"" + funciones.get(i).getId() + "\".\n");
                                }
                            }
                        } else {
                            JT_errores.append("Error! Los parametros no son iguales en las funciones \"" + funciones.get(i).getId() + "\". \n");
                        }
                    }
                }
            }
        }
    }

    public static boolean existe_param(String id, ArrayList<Parametro> params) {
        boolean bandera = false;
        for (int i = 0; i < params.size(); i++) {
            if (params.get(i).getId().equals(id)) {
                bandera = true;
            }
        }
        return bandera;
    }

    public boolean existe_tipo(String id, String id2) {
        boolean bandera = false;
        for (int i = 0; i < tipos.size(); i++) {
            if (tipos.get(i).getId().equals(id) && (tipos.get(i).getFuncion().equals(id2) | tipos.get(i).getFuncion().equals("$global"))) {
                bandera = true;
            }
        }
        return bandera;
    }

    public boolean existe_tipo2(String id, String id2) {
        boolean bandera = false;
        for (int i = 0; i < tipos.size(); i++) {
            if (tipos.get(i).getId().equals(id)) {
                if (tipos.get(i).getFuncion().equals(id2)) {
                    bandera = true;
                }
            }
        }
        return bandera;
    }

    public String devolver_Tipo(String id, String id2) {
        String tipo = "";
        for (int i = 0; i < tipos.size(); i++) {
            if (tipos.get(i).getId().equals(id) && (tipos.get(i).getFuncion().equals(id2) | tipos.get(i).getFuncion().equals("$global"))) {
                tipo = tipos.get(i).getTipo();
            }
        }
        return tipo;
    }

    public String devolver_TipoFuncion(String id) {
        String tipo = "";
        for (int j = 0; j < funciones.size(); j++) {
            if (funciones.get(j).getId().equals(id)) {
                tipo = funciones.get(j).getTipo();
            }
        }
        return tipo;
    }

 public void tablas(String arbol) {

        // Tablas
        funciones = new ArrayList();
        tipos = new ArrayList();
        tuplas = new ArrayList();
        cuadruplos = new ArrayList();

        // Limpieza
        String txt = arbol.replace("digraph G", "").replace("{", "").replace("}", "").replace("\"", "").replace(";", "").replace(" -> ", ",").replaceAll("\\r\\n|\\r|\\n", ",").replace(",,", ",").trim();
        String txt2 = txt.substring(1, txt.length() - 2);
        String[] arr = txt2.split(",");
        //System.out.println("--------------------------------------------------------------");
        for (int i = 0; i < arr.length; i += 2) {
            String dominio = arr[i];
            String rango = arr[i + 1];
            Tupla t = new Tupla(dominio, rango);
            tuplas.add(t);
            System.out.println(i / 2 + ") " + t.toString());
        }

        String nombre_funcion = "";
        int offset = 0;

        // Analisis Semantico
        if (JT_errores.getText().trim().equals("")) {
            // Recorrido
            for (int i = 0; i < tuplas.size(); i++) {

                // Funciones
                if (tuplas.get(i).getRango().contains("_Funcion")) {
                    String clasificacion;
                    if (tuplas.get(i).getRango().contains("Corta")) {
                        clasificacion = "Corta";
                    } else {
                        clasificacion = "Larga";
                    }
                    i += 2;
                    String tipo = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    i += 2;
                    String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    nombre_funcion = id;
                    Funcion f = new Funcion(tipo, id, clasificacion);
                    if (!nombre_funcion.equals("main")) {
                        offset = 8;
                    } else {
                        offset = 0;
                    }

                    // Parametros
                    if (i + 1 < tuplas.size()) {
                        if (tuplas.get(i + 1).getRango().contains("Parametros")) {
                            i += 2;
                            ArrayList<Parametro> parametros = new ArrayList();
                            while (tuplas.get(i).getDominio().contains("Parametros")) {
                                if (tuplas.get(i).getRango().contains("Simple")) {
                                    i += 2;
                                    String tipo1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    Parametro p = new Parametro(tipo1);
                                    parametros.add(p);
                                } else if (tuplas.get(i).getRango().contains("Compuesto")) {
                                    i += 2;
                                    String tipo1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    i += 2;
                                    String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    Parametro p = new Parametro(tipo1, id1);
                                    int off = 4 - offset % 4;
                                    if (off < 4) {
                                        offset += off;
                                    }
                                    if (tipo1.equals("char")) {
                                        offset += 1;
                                    } else {
                                        offset += 4;
                                    }
                                    Tipo t = new Tipo(tipo1, id1, id, offset);
                                    if (existe_param(id1, parametros)) {
                                        JT_errores.append("Error! El parametro \"" + id1 + "\" ya existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    } else {
                                        parametros.add(p);
                                        tipos.add(t);
                                    }
                                }
                                i++;
                            }
                            f.setParametros(parametros);
                            i--;
                        }
                    }
                    existe_func(f);
                    funciones.add(f);

                    // Asignaciones
                } else if (tuplas.get(i).getRango().contains("_Asignacion")) {
                    String funcion = nombre_funcion;
                    if (tuplas.get(i).getDominio().contains("_Inicio")) {
                        funcion = "$global";
                    }
                    i += 2;
                    String tipo = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    i += 2;
                    String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    if (!funcion.equals("$global")) {
                        int off = 4 - offset % 4;
                        if (off < 4) {
                            offset += off;
                        }
                        if (tipo.equals("char")) {
                            offset += 1;
                        } else {
                            offset += 4;
                        }
                    } else {
                        offset = 0;
                    }
                    Tipo t = new Tipo(tipo, id, funcion, offset);
                    if (existe_tipo2(id, funcion)) {
                        if (funcion.equals("$global")) {
                            JT_errores.append("Error! La variable \"" + id + "\" ya existe. (De manera global)\n");
                        } else {
                            JT_errores.append("Error! La variable \"" + id + "\" ya existe. (Dentro de la funcion \"" + funcion + "\")\n");
                        }
                    } else {
                        tipos.add(t);
                    }
                    if (i + 1 < tuplas.size()) {
                        if (tuplas.get(i + 1).getDominio().contains("_Asignacion")) {
                            i++;
                            String tipo1 = tipo, id1 = id;
                            while (i < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio")) {
                                if (tuplas.get(i).getRango().contains("_ID")) {
                                    i++;
                                    if (tipo.contains("*")) {
                                        tipo1 = tipo.substring(0, tipo.length() - 1);
                                    } else {
                                        tipo1 = tipo;
                                    }
                                    id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    if (!funcion.equals("$global")) {
                                        int off = 4 - offset % 4;
                                        if (off < 4) {
                                            offset += off;
                                        }
                                        if (tipo.equals("char")) {
                                            offset += 1;
                                        } else {
                                            offset += 4;
                                        }
                                    } else {
                                        offset = 0;
                                    }
                                    Tipo t1 = new Tipo(tipo1, id1, funcion, offset);
                                    if (existe_tipo2(id1, funcion)) {
                                        if (funcion.equals("$global")) {
                                            JT_errores.append("Error! La variable \"" + id1 + "\" ya existe. (De manera global)\n");
                                        } else {
                                            JT_errores.append("Error! La variable \"" + id1 + "\" ya existe. (Dentro de la funcion \"" + funcion + "\")\n");
                                        }
                                    } else {
                                        tipos.add(t1);
                                    }
                                } else if (tuplas.get(i).getRango().contains("_Apuntador")) {
                                    i += 2;
                                    if (tipo.contains("*")) {
                                        tipo1 = tipo;
                                    } else {
                                        tipo1 = tipo + "*";
                                    }
                                    id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    if (!funcion.equals("$global")) {
                                        int off = 4 - offset % 4;
                                        if (off < 4) {
                                            offset += off;
                                        }
                                        if (tipo.equals("char")) {
                                            offset += 1;
                                        } else {
                                            offset += 4;
                                        }
                                    } else {
                                        offset = 0;
                                    }
                                    Tipo t1 = new Tipo(tipo1, id1, funcion, offset);
                                    if (existe_tipo2(id1, funcion)) {
                                        if (funcion.equals("$global")) {
                                            JT_errores.append("Error! La variable \"" + id1 + "\" ya existe. (De manera global)\n");
                                        } else {
                                            JT_errores.append("Error! La variable \"" + id1 + "\" ya existe. (Dentro de la funcion \"" + funcion + "\")\n");
                                        }
                                    } else {
                                        tipos.add(t1);
                                    }
                                } else if (tuplas.get(i).getRango().contains("_Num")) {
                                    if (!tipo1.contains("int")) {
                                        JT_errores.append("Error! La variable \"" + id1 + "\" esperaba valores de tipo \"" + tipo1 + "\". (Dentro de la funcion \"" + funcion + "\")\n");
                                    }
                                    i++;
                                } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                                    if (!tipo1.contains("char")) {
                                        JT_errores.append("Error! La variable \"" + id1 + "\" esperaba valores de tipo \"" + tipo1 + "\". (Dentro de la funcion \"" + funcion + "\")\n");
                                    }
                                    i++;
                                }
                                i++;
                            }
                            i--;
                        }
                    }

                    // Expresiones
                } else if (tuplas.get(i).getRango().contains("_Expresion")) {
                    String tipo = "", id = "";
                    int cont = 0;
                    i++;
                    boolean asig = false;
                    if (tuplas.get(i).getRango().contains("Asignacion")) {
                        asig = true;
                        i++;
                    }
                    while (i + 1 < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getDominio().contains("_Else") && !tuplas.get(i).getDominio().contains("_For")) {
                        if (tuplas.get(i).getRango().contains("_Llamada")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            String tipo1 = "";
                            ArrayList<Parametro> parametros = new ArrayList();
                            boolean bandera = false;
                            for (int j = 0; j < funciones.size(); j++) {
                                if (funciones.get(j).getId().equals(id1)) {
                                    bandera = true;
                                    tipo1 = funciones.get(j).getTipo();
                                    parametros = funciones.get(j).getParametros();
                                }
                            }
                            if (bandera) {
                                if (tipo.equals("")) {
                                    tipo = tipo1;
                                    id = id1;
                                } else {
                                    if (tipo.contains("*")) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    } else if (!tipo.equals(tipo1)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    } else if (cont > 2 && tipo.equals("char")) {
                                        JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperado en la asignacion de \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                    int j = -1;
                                    if (tuplas.get(i + 1).getRango().contains("Parametros")) {
                                        i++;
                                        int num = Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_")));
                                        i++;
                                        String tipo2 = "";
                                        while (i + 1 < tuplas.size() && Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_"))) < num) {
                                            if (tuplas.get(i).getDominio().contains("_Parametros")) {
                                                j++;
                                                if (j < parametros.size()) {
                                                    tipo2 = parametros.get(j).getTipo();
                                                } else {
                                                    tipo2 = ".";
                                                }
                                            } else if (tuplas.get(i).getRango().contains("_ID")) {
                                                i++;
                                                String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                                if (existe_tipo(id2, nombre_funcion)) {
                                                    String tipo3 = devolver_Tipo(id2, nombre_funcion);
                                                    if (!tipo2.equals(".")) {
                                                        if (!tipo2.equals(tipo3)) {
                                                            JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\" de la variable \"" + id2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                        }
                                                    } else {
                                                        JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                    }
                                                } else {
                                                    JT_errores.append("Error! La variable \"" + id2 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            } else if (tuplas.get(i).getRango().contains("_Num")) {
                                                i++;
                                                String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                                if (!tipo2.equals(".")) {
                                                    if (!tipo2.equals("int")) {
                                                        JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                    }
                                                } else {
                                                    JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                                                i++;
                                                String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                                if (!tipo2.equals(".")) {
                                                    if (!tipo2.equals("char")) {
                                                        JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                    }
                                                } else {
                                                    JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            }
                                            i++;
                                        }
                                        i--;
                                    }
                                    if (parametros.size() > j + 1) {
                                        JT_errores.append("Error! El llamado de la funci√≥n \"" + id1 + "\" cuenta con menos parametros de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                }
                            } else {
                                JT_errores.append("Error! La funcion \"" + id1 + "\" no existe. \n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Ampersand")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo.equals("")) {
                                    tipo = tipo1;
                                    id = id1;
                                } else {
                                    if (tipo.contains("*")) {
                                        if (tipo.equals(tipo1 + "*")) {
                                            if (cont != 2) {
                                                JT_errores.append("Error! Demasiadas variables junto a \"&" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                            }
                                        } else {
                                            JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                        }
                                    } else {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Apuntador")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo1.contains("*")) {
                                    if (tipo.equals("")) {
                                        tipo = tipo1;
                                        id = id1;
                                    } else if (tipo.contains("*")) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    } else if (!(tipo + "*").equals(tipo1)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    } else if (cont > 2 && tipo.equals("char")) {
                                        JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada en la asignacion de \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id1 + "\" no es apuntador. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_ID")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo.equals("")) {
                                    tipo = tipo1;
                                    id = id1;
                                } else if (tipo.contains("*")) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                } else if (!tipo.equals(tipo1)) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                } else if (cont > 2 && tipo.equals("char")) {
                                    JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada en la asignacion de \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Num")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (tipo.equals("")) {
                                tipo = "int";
                                id = id1;
                            } else if (tipo.contains("*")) {
                                JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            } else if (!tipo.equals("int")) {
                                JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (tipo.equals("")) {
                                tipo = "char";
                                id = id1;
                            } else if (tipo.contains("*")) {
                                JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            } else if (!tipo.equals("char")) {
                                JT_errores.append("Error! Incompatibilidad de tipos entre \"" + id + "\" y \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            } else if (cont > 2) {
                                JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada en la asignacion de \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Expresion")) {
                            if (!(tuplas.get(i).getRango().contains("Suma") | tuplas.get(i).getRango().contains("Resta") | tuplas.get(i).getRango().contains("Multiplicacion") | tuplas.get(i).getRango().contains("Division") | tuplas.get(i).getRango().contains("Parentesis")) && asig) {
                                JT_errores.append("Error! Operador no esperado en la asignacion. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            } else if ((tuplas.get(i).getRango().contains("Suma") | tuplas.get(i).getRango().contains("Resta") | tuplas.get(i).getRango().contains("Multiplicacion") | tuplas.get(i).getRango().contains("Division") | tuplas.get(i).getRango().contains("Parentesis")) && !asig) {
                                JT_errores.append("Error! Operador no esperado en la expresion booleana. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        }
                        i++;
                    }
                    i--;

                    // Printf
                } else if (tuplas.get(i).getRango().contains("_Printf")) {
                    i += 2;
                    String cadena = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    int cont = 0;
                    String tipo = "";
                    for (int j = 0; j < cadena.length(); j++) {
                        if (cadena.charAt(j) == '%') {
                            if (j + 1 < cadena.length()) {
                                if (cadena.charAt(j + 1) == 'd') {
                                    tipo = "int";
                                    cont++;
                                    j++;
                                } else if (cadena.charAt(j + 1) == 'c') {
                                    tipo = "char";
                                    cont++;
                                    j++;
                                }
                            }
                        }
                    }
                    if (cont == 1) {
                        if (i + 1 < tuplas.size()) {
                            if (tuplas.get(i + 1).getRango().contains("_ID")) {
                                i += 2;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (existe_tipo(id, nombre_funcion)) {
                                    String tipo1 = devolver_Tipo(id, nombre_funcion);
                                    if (!tipo.equals(tipo1)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre el \"printf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else if (tuplas.get(i + 1).getRango().contains("_Apuntador")) {
                                i += 3;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (existe_tipo(id, nombre_funcion)) {
                                    String tipo1 = devolver_Tipo(id, nombre_funcion);
                                    if (!tipo1.contains(tipo)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre el \"printf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else if (tuplas.get(i + 1).getRango().contains("_Num")) {
                                i += 2;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (!tipo.equals("int")) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre el \"printf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else if (tuplas.get(i + 1).getRango().contains("_Apuntador")) {
                                i += 2;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (!tipo.equals("char")) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre el \"printf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            }
                        } else {
                            JT_errores.append("Error! El printf cuenta con menos argumentos de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                        }
                    } else if (cont == 0) {
                        if (i + 1 < tuplas.size()) {
                            if (!tuplas.get(i + 1).getDominio().contains("_Declaracion") && !tuplas.get(i + 1).getDominio().contains("_Inicio") && !tuplas.get(i + 1).getDominio().contains("_If") && !tuplas.get(i + 1).getDominio().contains("_Else")) {
                                JT_errores.append("Error! El printf cuenta con m√°s argumentos de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        }
                    } else {
                        JT_errores.append("Error! El printf cuenta con m√°s %d / %c de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                    }

                    // Scanf
                } else if (tuplas.get(i).getRango().contains("_Scanf")) {
                    i += 2;
                    String cadena = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    boolean correcto = false;
                    String tipo = "";
                    if (cadena.equals("%d")) {
                        tipo = "int";
                        correcto = true;
                    } else if (cadena.equals("%c")) {
                        tipo = "char";
                        correcto = true;
                    }
                    if (correcto) {
                        if (i + 1 < tuplas.size()) {
                            if (tuplas.get(i + 1).getRango().contains("_ID")) {
                                i += 2;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (existe_tipo(id, nombre_funcion)) {
                                    String tipo1 = devolver_Tipo(id, nombre_funcion);
                                    if (!(tipo + "*").equals(tipo1)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre el \"scanf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else if (tuplas.get(i + 1).getRango().contains("_Ampersand")) {
                                i += 3;
                                String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                if (existe_tipo(id, nombre_funcion)) {
                                    String tipo1 = devolver_Tipo(id, nombre_funcion);
                                    if (!tipo1.equals(tipo)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre el \"scanf\" y \"" + id + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! El scanf cuenta con un parametro no esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else {
                            JT_errores.append("Error! El scanf cuenta con menos parametros de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                        }
                    } else {
                        JT_errores.append("Error! El scanf no cuenta con una cadena correcta. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                    }

                    // llamada
                } else if (tuplas.get(i).getRango().contains("_Llamada")) {
                    i += 2;
                    String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    ArrayList<Parametro> parametros = new ArrayList();
                    boolean bandera = false;
                    for (int j = 0; j < funciones.size(); j++) {
                        if (funciones.get(j).getId().equals(id1)) {
                            bandera = true;
                            parametros = funciones.get(j).getParametros();
                        }
                    }
                    if (bandera) {
                        int j = -1;
                        if (i + 1 < tuplas.size() && tuplas.get(i + 1).getRango().contains("Parametros")) {
                            i++;
                            int num = Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_")));
                            i++;
                            String tipo2 = "";
                            while (i + 1 < tuplas.size() && Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_"))) < num) {
                                if (tuplas.get(i).getDominio().contains("_Parametros")) {
                                    j++;
                                    if (j < parametros.size()) {
                                        tipo2 = parametros.get(j).getTipo();
                                    } else {
                                        tipo2 = ".";
                                    }
                                } else if (tuplas.get(i).getRango().contains("_ID")) {
                                    i++;
                                    String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    if (existe_tipo(id2, nombre_funcion)) {
                                        String tipo3 = devolver_Tipo(id2, nombre_funcion);
                                        if (!tipo2.equals(".")) {
                                            if (!tipo2.equals(tipo3)) {
                                                JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\" de la variable \"" + id2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                            }
                                        } else {
                                            JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                        }
                                    } else {
                                        JT_errores.append("Error! La variable \"" + id2 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else if (tuplas.get(i).getRango().contains("_Num")) {
                                    i++;
                                    String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    if (!tipo2.equals(".")) {
                                        if (!tipo2.equals("int")) {
                                            JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                        }
                                    } else {
                                        JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                                    i++;
                                    String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                    if (!tipo2.equals(".")) {
                                        if (!tipo2.equals("char")) {
                                            JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                        }
                                    } else {
                                        JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                }
                                i++;
                            }
                            i--;
                        }
                        if (parametros.size() > j + 1) {
                            JT_errores.append("Error! El llamado de la funci√≥n \"" + id1 + "\" cuenta con menos parametros de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                        }
                    } else {
                        JT_errores.append("Error! La funcion \"" + id1 + "\" no existe. \n");
                    }

                    // Returns
                } else if (tuplas.get(i).getRango().contains("_Return")) {
                    String tipo = devolver_TipoFuncion(nombre_funcion);
                    int cont = 0;
                    i += 2;
                    while (i + 1 < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getDominio().contains("_Else")) {
                        if (tuplas.get(i).getRango().contains("_Llamada")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            String tipo1 = "";
                            ArrayList<Parametro> parametros = new ArrayList();
                            boolean bandera = false;
                            for (int j = 0; j < funciones.size(); j++) {
                                if (funciones.get(j).getId().equals(id1)) {
                                    bandera = true;
                                    tipo1 = funciones.get(j).getTipo();
                                    parametros = funciones.get(j).getParametros();
                                }
                            }
                            if (bandera) {
                                if (tipo.contains("*")) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                } else if (!tipo.equals(tipo1)) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                } else if (cont > 1 && tipo.equals("char")) {
                                    JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperado en el retorno. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                                int j = -1;
                                if (tuplas.get(i + 1).getRango().contains("Parametros")) {
                                    i++;
                                    int num = Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_")));
                                    i++;
                                    String tipo2 = "";
                                    while (i + 1 < tuplas.size() && Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_"))) < num) {
                                        if (tuplas.get(i).getDominio().contains("_Parametros")) {
                                            j++;
                                            if (j < parametros.size()) {
                                                tipo2 = parametros.get(j).getTipo();
                                            } else {
                                                tipo2 = ".";
                                            }
                                        } else if (tuplas.get(i).getRango().contains("_ID")) {
                                            i++;
                                            String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                            if (existe_tipo(id2, nombre_funcion)) {
                                                String tipo3 = devolver_Tipo(id2, nombre_funcion);
                                                if (!tipo2.equals(".")) {
                                                    if (!tipo2.equals(tipo3)) {
                                                        JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\" de la variable \"" + id2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                    }
                                                } else {
                                                    JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            } else {
                                                JT_errores.append("Error! La variable \"" + id2 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                            }
                                        } else if (tuplas.get(i).getRango().contains("_Num")) {
                                            i++;
                                            String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                            if (!tipo2.equals(".")) {
                                                if (!tipo2.equals("int")) {
                                                    JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\" de la variable \"" + id2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            } else {
                                                JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                            }
                                        } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                                            i++;
                                            String id2 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                                            if (!tipo2.equals(".")) {
                                                if (!tipo2.equals("char")) {
                                                    JT_errores.append("Error! Incompatibilidad de tipos entre parametros, la funci√≥n \"" + id1 + "\" esperaba un tipo \"" + tipo2 + "\" de la variable \"" + id2 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                                }
                                            } else {
                                                JT_errores.append("Error! Parametro extra \"" + id2 + "\" no esperado en la llamada de funcion \"" + id1 + "\". (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                            }
                                        }
                                        i++;
                                    }
                                    i--;
                                }
                                if (parametros.size() > j + 1) {
                                    JT_errores.append("Error! El llamado de la funci√≥n \"" + id1 + "\" cuenta con menos parametros de lo esperado. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! La funcion \"" + id1 + "\" no existe. \n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Ampersand")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo.contains("*")) {
                                    if (tipo.equals(tipo1 + "*")) {
                                        if (cont != 1) {
                                            JT_errores.append("Error! Demasiadas variables junto a \"&" + id1 + "\" en el retorno. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                        }
                                    } else {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                    }
                                } else {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Apuntador")) {
                            cont++;
                            i += 2;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo1.contains("*")) {
                                    if (tipo.contains("*")) {
                                        cont++;
                                        JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                    } else if (!(tipo + "*").equals(tipo1)) {
                                        JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                    } else if (cont > 1 && tipo.equals("char")) {
                                        JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada dentro del retorno. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                    }
                                } else {
                                    JT_errores.append("Error! La variable \"" + id1 + "\" no es apuntador. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_ID")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (existe_tipo(id1, nombre_funcion)) {
                                String tipo1 = devolver_Tipo(id1, nombre_funcion);
                                if (tipo.contains("*")) {
                                    cont++;
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                } else if (!tipo.equals(tipo1)) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                } else if (cont > 1 && tipo.equals("char")) {
                                    JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada dentro del retorno. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            } else {
                                JT_errores.append("Error! La variable \"" + id1 + "\" no existe. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Num")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (tipo.contains("*")) {
                                cont++;
                                JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                            } else if (!tipo.equals("int")) {
                                JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                            }
                        } else if (tuplas.get(i).getRango().contains("_Caracter")) {
                            cont++;
                            i++;
                            String id1 = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                            if (tipo.contains("*")) {
                                cont++;
                                JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                            } else {
                                if (!tipo.equals("char")) {
                                    JT_errores.append("Error! Incompatibilidad de tipos entre la funcion \"" + nombre_funcion + "\" y \"" + id1 + "\", dentro del retorno. \n");
                                } else if (cont > 1) {
                                    JT_errores.append("Error! Variable extra \"" + id1 + "\" no esperada dentro del retorno. (Dentro de la funcion \"" + nombre_funcion + "\")\n");
                                }
                            }
                        }
                        i++;
                    }
                    i--;
                }
            }

            // Validaciones
            int contmain = 0;
            for (int i = 0; i < funciones.size(); i++) {
                if (funciones.get(i).getId().equals("main")) {
                    contmain++;
                }
            }
            if (contmain == 0) {
                JT_errores.append("Error! Tiene que haber una funci√≥n main. \n");
            } else if (contmain > 1) {
                JT_errores.append("Error! No puede haber m√°s de una funci√≥n main. \n");
            }

            // Verificaciones
            System.out.println("*********************************************************");
            for (int i = 0; i < funciones.size(); i++) {
                System.out.println(funciones.get(i).toString());
                for (int j = 0; j < funciones.get(i).getParametros().size(); j++) {
                    System.out.println(funciones.get(i).getParametros().get(j));
                }
            }
            System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
           DefaultTableModel modelo = (DefaultTableModel) JT_tipos.getModel();
             int count =modelo.getRowCount();

            for (int i = 0; i < count; i++) {
                modelo.removeRow(0);
            }
            Font font2 = new Font("Verdana", Font.PLAIN, 12);
            JT_tipos.setFont(font2);
            JT_tipos.setRowHeight(30);
            for (int i = 0; i < tipos.size(); i++) {
                String[] fila = {tipos.get(i).getTipo(), tipos.get(i).getId(), tipos.get(i).getFuncion(), tipos.get(i).getOffset() + ""};
                modelo.addRow(fila);
                System.out.println(tipos.get(i).toString());
            }
        }

        // Codigo Intermedio
        if (JT_errores.getText().trim().equals("")) {
            int temp = 1, etiq = 0;
            Stack<String> superpila = new Stack();
            Stack<Integer> supernums = new Stack();
            for (int i = 0; i < tuplas.size(); i++) {

                // Etiquetas
                if (superpila.size() > 0 && supernums.peek() < Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_")))) {
                    do {
                        if (superpila.peek().equals("*")) {
                            superpila.pop();
                            Cuadruplo cuad = new Cuadruplo("GOTO", superpila.pop());
                            cuadruplos.add(cuad);
                        } else {
                            Cuadruplo cuad = new Cuadruplo("ETIQ", superpila.pop());
                            cuadruplos.add(cuad);
                        }
                        supernums.pop();
                    } while (superpila.size() > 0 && supernums.peek() < Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_"))));
                }

                // Funciones
                if (tuplas.get(i).getRango().contains("_Funcion")) {
                    if (tuplas.get(i).getRango().contains("Larga")) {
                        i += 4;
                        String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                        if (cuadruplos.size() != 0) {
                            Cuadruplo cuad = new Cuadruplo("END", "");
                            cuadruplos.add(cuad);
                        }
                        Cuadruplo cuad = new Cuadruplo("FUNC", id);
                        cuadruplos.add(cuad);
                    }

                    // Expresiones
                } else if (tuplas.get(i).getRango().contains("_Expresion") | tuplas.get(i).getRango().contains("_Llamada")) {
                    ArrayList<Tupla> tup = new ArrayList();
                    boolean llamada = tuplas.get(i).getRango().contains("Llamada"), retornar = false;
                    Stack<String> pila = new Stack();
                    Stack<Integer> pilaPar = new Stack();
                    int num = 0;
                    String id = "";
                    if (!llamada) {
                        i++;
                        while (i < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getRango().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getRango().contains("_Else") && !tuplas.get(i).getDominio().contains("_For")) {
                            tup.add(tuplas.get(i));
                            i++;
                        }
                        i--;
                        retornar = !tup.get(1).getDominio().contains("Asignacion");
                        if (!retornar) {
                            num = 3;
                            id = tup.get(2).getRango().substring(tup.get(1).getRango().indexOf("_") + 1);
                        }
                    } else {
                        do {
                            tup.add(tuplas.get(i));
                            i++;
                        } while (i < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getRango().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getRango().contains("_Else") && !tuplas.get(i).getDominio().contains("_For"));
                        i--;
                    }
                    boolean expre = false;
                    for (int j = num; j < tup.size(); j++) {
                        if (tup.get(j).getRango().contains("Auto")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            String oper1;
                            if (tup.get(j).getRango().contains("Incremento")) {
                                oper1 = "+";
                            } else {
                                oper1 = "-";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j += 2;
                                        String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                        String Temp = "$t" + temp;
                                        Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                        cuadruplos.add(cuad1);
                                        temp++;
                                        pila.push(id1);
                                    } else {
                                        if (expre) {
                                            j += 2;
                                            String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                            cuadruplos.add(cuad);
                                            Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                            cuadruplos.add(cuad1);
                                            temp++;
                                            pila.push(id1);
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j += 2;
                                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                                String Temp = "$t" + temp;
                                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                                cuadruplos.add(cuad);
                                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                                cuadruplos.add(cuad1);
                                                temp++;
                                                pila.push(id1);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j += 2;
                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                String Temp = "$t" + temp;
                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                cuadruplos.add(cuad);
                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                cuadruplos.add(cuad1);
                                temp++;
                                pila.push(id1);
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("ID") | tup.get(j).getRango().contains("Num") | tup.get(j).getRango().contains("Caracter")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j++;
                                        pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                    } else {
                                        if (expre) {
                                            j++;
                                            pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j++;
                                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j++;
                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("Llamada Funcion")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j += 2;
                                        String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                        if (tup.get(j + 1).getDominio().contains("Llamada Funcion")) {
                                            j += 2;
                                            while (j < tup.size() && tup.get(j).getDominio().contains("Parametros")) {
                                                int param_num = Integer.parseInt(tup.get(j + 1).getDominio().substring(0, tup.get(j + 1).getDominio().indexOf("_")));
                                                j++;
                                                ArrayList<Tupla> tupP = new ArrayList();
                                                while (j < tup.size() && Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))) <= param_num) {
                                                    tupP.add(tup.get(j));
                                                    j++;
                                                }
                                                Stack<String> pilaP = new Stack();
                                                Stack<Integer> pilaParP = new Stack();
                                                boolean expreP = false;
                                                for (int jP = 0; jP < tupP.size(); jP++) {
                                                    if (tupP.get(jP).getRango().contains("Auto")) {
                                                        String operP = "";
                                                        if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                            operP = "*";
                                                        } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                            operP = "+";
                                                        } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                            operP = "-";
                                                        } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                            operP = "/";
                                                        }
                                                        String oper1P;
                                                        if (tupP.get(jP).getRango().contains("Incremento")) {
                                                            oper1P = "+";
                                                        } else {
                                                            oper1P = "-";
                                                        }
                                                        if (pilaP.size() > 0) {
                                                            boolean seguirP = true;
                                                            if (pilaParP.size() > 0) {
                                                                if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                    seguirP = false;
                                                                    pilaParP.pop();
                                                                    jP--;
                                                                }
                                                            }
                                                            if (seguirP) {
                                                                if (pilaP.peek().equals(operP)) {
                                                                    jP += 2;
                                                                    String id1P = tup.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                    cuadruplos.add(cuad1P);
                                                                    temp++;
                                                                    pilaP.push(id1P);
                                                                } else {
                                                                    if (expreP) {
                                                                        jP += 2;
                                                                        String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                        cuadruplos.add(cuad1P);
                                                                        temp++;
                                                                        pilaP.push(id1P);
                                                                        expreP = false;
                                                                    } else {
                                                                        boolean entrarP = true;
                                                                        if (pilaP.size() >= 3) {
                                                                            String arg2P = pilaP.pop();
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                if (operP.equals("+") | operP.equals("-")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    if (opP.equals("*") | opP.equals("/")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                pilaP.push(arg1P);
                                                                                pilaP.push(opP);
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                        if (entrarP) {
                                                                            pilaP.push(operP);
                                                                            jP += 2;
                                                                            String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                            cuadruplos.add(cuad1P);
                                                                            temp++;
                                                                            pilaP.push(id1P);
                                                                        } else {
                                                                            jP--;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                boolean parP = true;
                                                                while (parP) {
                                                                    String arg2P = pilaP.pop();
                                                                    if (!pilaP.peek().equals("(")) {
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        pilaP.push(TempP);
                                                                        temp++;
                                                                    } else {
                                                                        parP = false;
                                                                        pilaP.pop();
                                                                        pilaP.push(arg2P);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            jP += 2;
                                                            String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                            String TempP = "$t" + temp;
                                                            Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                            cuadruplos.add(cuadP);
                                                            Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                            cuadruplos.add(cuad1P);
                                                            temp++;
                                                            pilaP.push(id1P);
                                                            if (!operP.equals("")) {
                                                                pilaP.push(operP);
                                                            }
                                                        }
                                                    } else if (tupP.get(jP).getRango().contains("ID") | tupP.get(jP).getRango().contains("Num") | tupP.get(jP).getRango().contains("Caracter")) {
                                                        String operP = "";
                                                        if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                            operP = "*";
                                                        } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                            operP = "+";
                                                        } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                            operP = "-";
                                                        } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                            operP = "/";
                                                        }
                                                        if (pilaP.size() > 0) {
                                                            boolean seguirP = true;
                                                            if (pilaParP.size() > 0) {
                                                                if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                    seguirP = false;
                                                                    pilaParP.pop();
                                                                    jP--;
                                                                }
                                                            }
                                                            if (seguirP) {
                                                                if (pilaP.peek().equals(operP)) {
                                                                    jP++;
                                                                    pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                } else {
                                                                    if (expreP) {
                                                                        jP++;
                                                                        pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                        expreP = false;
                                                                    } else {
                                                                        boolean entrarP = true;
                                                                        if (pilaP.size() >= 3) {
                                                                            String arg2P = pilaP.pop();
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                if (operP.equals("+") | operP.equals("-")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    if (opP.equals("*") | opP.equals("/")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                pilaP.push(arg1P);
                                                                                pilaP.push(opP);
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                        if (entrarP) {
                                                                            pilaP.push(operP);
                                                                            jP++;
                                                                            pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                        } else {
                                                                            jP--;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                boolean parP = true;
                                                                while (parP) {
                                                                    String arg2P = pilaP.pop();
                                                                    if (!pilaP.peek().equals("(")) {
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        pilaP.push(TempP);
                                                                        temp++;
                                                                    } else {
                                                                        parP = false;
                                                                        pilaP.pop();
                                                                        pilaP.push(arg2P);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            jP++;
                                                            pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                            if (!operP.equals("")) {
                                                                pilaP.push(operP);
                                                            }
                                                        }
                                                    } else if (tupP.get(jP).getRango().contains("Expresion")) {
                                                        String operP = "";
                                                        if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                            operP = "*";
                                                        } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                            operP = "+";
                                                        } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                            operP = "-";
                                                        } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                            operP = "/";
                                                        } else if (tupP.get(jP).getDominio().contains("Parentesis")) {
                                                            operP = "(";
                                                            pilaP.push(operP);
                                                            pilaParP.push(Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_"))));
                                                        }
                                                        if (pilaP.size() > 0 && !operP.equals("(")) {
                                                            boolean seguirP = true;
                                                            if (pilaParP.size() > 0) {
                                                                if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                    seguirP = false;
                                                                    pilaParP.pop();
                                                                    jP--;
                                                                }
                                                            }
                                                            if (seguirP) {
                                                                expreP = true;
                                                                if (!pilaP.peek().equals(operP)) {
                                                                    if (!(pilaP.peek().equals("+") | pilaP.peek().equals("*") | pilaP.peek().equals("/") | pilaP.peek().equals("-") | pilaP.peek().equals("("))) {
                                                                        boolean entrarP = true;
                                                                        if (pilaP.size() >= 3) {
                                                                            String arg2P = pilaP.pop();
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                if (operP.equals("+") | operP.equals("-")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    if (opP.equals("*") | opP.equals("/")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                pilaP.push(arg1P);
                                                                                pilaP.push(opP);
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                        if (entrarP) {
                                                                            pilaP.push(operP);
                                                                        } else {
                                                                            jP--;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                boolean parP = true;
                                                                while (parP) {
                                                                    String arg2P = pilaP.pop();
                                                                    if (!pilaP.peek().equals("(")) {
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        pilaP.push(TempP);
                                                                        temp++;
                                                                    } else {
                                                                        parP = false;
                                                                        pilaP.pop();
                                                                        pilaP.push(arg2P);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                while (pilaP.size() > 1) {
                                                    String arg2P = pilaP.pop();
                                                    String opP = pilaP.pop();
                                                    String arg1P = pilaP.pop();
                                                    if (opP.equals("(")) {
                                                        opP = arg1P;
                                                        arg1P = pilaP.pop();
                                                    } else if (arg1P.equals("(")) {
                                                        arg1P = pilaP.pop();
                                                    }
                                                    String TempP = "$t" + temp;
                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                    cuadruplos.add(cuadP);
                                                    pilaP.push(TempP);
                                                    temp++;
                                                }
                                                Cuadruplo cuad = new Cuadruplo("PARAM", pilaP.pop());
                                                cuadruplos.add(cuad);
                                            }
                                            j--;
                                            Cuadruplo cuad = new Cuadruplo("CALL", id1);
                                            cuadruplos.add(cuad);
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad1 = new Cuadruplo("=", "RET", "", Temp);
                                            cuadruplos.add(cuad1);
                                            pila.push(Temp);
                                            temp++;
                                        }
                                    } else {
                                        if (expre) {
                                            j += 2;
                                            String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                            if (tup.get(j + 1).getDominio().contains("Llamada Funcion")) {
                                                j += 2;
                                                while (j < tup.size() && tup.get(j).getDominio().contains("Parametros")) {
                                                    int param_num = Integer.parseInt(tup.get(j + 1).getDominio().substring(0, tup.get(j + 1).getDominio().indexOf("_")));
                                                    j++;
                                                    ArrayList<Tupla> tupP = new ArrayList();
                                                    while (j < tup.size() && Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))) <= param_num) {
                                                        tupP.add(tup.get(j));
                                                        j++;
                                                    }
                                                    Stack<String> pilaP = new Stack();
                                                    Stack<Integer> pilaParP = new Stack();
                                                    boolean expreP = false;
                                                    for (int jP = 0; jP < tupP.size(); jP++) {
                                                        if (tupP.get(jP).getRango().contains("Auto")) {
                                                            String operP = "";
                                                            if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                operP = "*";
                                                            } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                operP = "+";
                                                            } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                operP = "-";
                                                            } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                operP = "/";
                                                            }
                                                            String oper1P;
                                                            if (tupP.get(jP).getRango().contains("Incremento")) {
                                                                oper1P = "+";
                                                            } else {
                                                                oper1P = "-";
                                                            }
                                                            if (pilaP.size() > 0) {
                                                                boolean seguirP = true;
                                                                if (pilaParP.size() > 0) {
                                                                    if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                        seguirP = false;
                                                                        pilaParP.pop();
                                                                        jP--;
                                                                    }
                                                                }
                                                                if (seguirP) {
                                                                    if (pilaP.peek().equals(operP)) {
                                                                        jP += 2;
                                                                        String id1P = tup.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                        cuadruplos.add(cuad1P);
                                                                        temp++;
                                                                        pilaP.push(id1P);
                                                                    } else {
                                                                        if (expreP) {
                                                                            jP += 2;
                                                                            String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                            cuadruplos.add(cuad1P);
                                                                            temp++;
                                                                            pilaP.push(id1P);
                                                                            expreP = false;
                                                                        } else {
                                                                            boolean entrarP = true;
                                                                            if (pilaP.size() >= 3) {
                                                                                String arg2P = pilaP.pop();
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                    if (operP.equals("+") | operP.equals("-")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        if (opP.equals("*") | opP.equals("/")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            pilaP.push(arg1P);
                                                                                            pilaP.push(opP);
                                                                                            pilaP.push(arg2P);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                            if (entrarP) {
                                                                                pilaP.push(operP);
                                                                                jP += 2;
                                                                                String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                                cuadruplos.add(cuad1P);
                                                                                temp++;
                                                                                pilaP.push(id1P);
                                                                            } else {
                                                                                jP--;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    boolean parP = true;
                                                                    while (parP) {
                                                                        String arg2P = pilaP.pop();
                                                                        if (!pilaP.peek().equals("(")) {
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            pilaP.push(TempP);
                                                                            temp++;
                                                                        } else {
                                                                            parP = false;
                                                                            pilaP.pop();
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                jP += 2;
                                                                String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                String TempP = "$t" + temp;
                                                                Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                cuadruplos.add(cuadP);
                                                                Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                cuadruplos.add(cuad1P);
                                                                temp++;
                                                                pilaP.push(id1P);
                                                                if (!operP.equals("")) {
                                                                    pilaP.push(operP);
                                                                }
                                                            }
                                                        } else if (tupP.get(jP).getRango().contains("ID") | tupP.get(jP).getRango().contains("Num") | tupP.get(jP).getRango().contains("Caracter")) {
                                                            String operP = "";
                                                            if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                operP = "*";
                                                            } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                operP = "+";
                                                            } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                operP = "-";
                                                            } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                operP = "/";
                                                            }
                                                            if (pilaP.size() > 0) {
                                                                boolean seguirP = true;
                                                                if (pilaParP.size() > 0) {
                                                                    if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                        seguirP = false;
                                                                        pilaParP.pop();
                                                                        jP--;
                                                                    }
                                                                }
                                                                if (seguirP) {
                                                                    if (pilaP.peek().equals(operP)) {
                                                                        jP++;
                                                                        pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                    } else {
                                                                        if (expreP) {
                                                                            jP++;
                                                                            pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                            expreP = false;
                                                                        } else {
                                                                            boolean entrarP = true;
                                                                            if (pilaP.size() >= 3) {
                                                                                String arg2P = pilaP.pop();
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                    if (operP.equals("+") | operP.equals("-")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        if (opP.equals("*") | opP.equals("/")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            pilaP.push(arg1P);
                                                                                            pilaP.push(opP);
                                                                                            pilaP.push(arg2P);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                            if (entrarP) {
                                                                                pilaP.push(operP);
                                                                                jP++;
                                                                                pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                            } else {
                                                                                jP--;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    boolean parP = true;
                                                                    while (parP) {
                                                                        String arg2P = pilaP.pop();
                                                                        if (!pilaP.peek().equals("(")) {
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            pilaP.push(TempP);
                                                                            temp++;
                                                                        } else {
                                                                            parP = false;
                                                                            pilaP.pop();
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                jP++;
                                                                pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                if (!operP.equals("")) {
                                                                    pilaP.push(operP);
                                                                }
                                                            }
                                                        } else if (tupP.get(jP).getRango().contains("Expresion")) {
                                                            String operP = "";
                                                            if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                operP = "*";
                                                            } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                operP = "+";
                                                            } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                operP = "-";
                                                            } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                operP = "/";
                                                            } else if (tupP.get(jP).getDominio().contains("Parentesis")) {
                                                                operP = "(";
                                                                pilaP.push(operP);
                                                                pilaParP.push(Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_"))));
                                                            }
                                                            if (pilaP.size() > 0 && !operP.equals("(")) {
                                                                boolean seguirP = true;
                                                                if (pilaParP.size() > 0) {
                                                                    if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                        seguirP = false;
                                                                        pilaParP.pop();
                                                                        jP--;
                                                                    }
                                                                }
                                                                if (seguirP) {
                                                                    expreP = true;
                                                                    if (!pilaP.peek().equals(operP)) {
                                                                        if (!(pilaP.peek().equals("+") | pilaP.peek().equals("*") | pilaP.peek().equals("/") | pilaP.peek().equals("-") | pilaP.peek().equals("("))) {
                                                                            boolean entrarP = true;
                                                                            if (pilaP.size() >= 3) {
                                                                                String arg2P = pilaP.pop();
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                    if (operP.equals("+") | operP.equals("-")) {
                                                                                        String TempP = "$t" + temp;
                                                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                        cuadruplos.add(cuadP);
                                                                                        pilaP.push(TempP);
                                                                                        temp++;
                                                                                        entrarP = false;
                                                                                    } else {
                                                                                        if (opP.equals("*") | opP.equals("/")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            pilaP.push(arg1P);
                                                                                            pilaP.push(opP);
                                                                                            pilaP.push(arg2P);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                            if (entrarP) {
                                                                                pilaP.push(operP);
                                                                            } else {
                                                                                jP--;
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    boolean parP = true;
                                                                    while (parP) {
                                                                        String arg2P = pilaP.pop();
                                                                        if (!pilaP.peek().equals("(")) {
                                                                            String opP = pilaP.pop();
                                                                            String arg1P = pilaP.pop();
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            pilaP.push(TempP);
                                                                            temp++;
                                                                        } else {
                                                                            parP = false;
                                                                            pilaP.pop();
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    while (pilaP.size() > 1) {
                                                        String arg2P = pilaP.pop();
                                                        String opP = pilaP.pop();
                                                        String arg1P = pilaP.pop();
                                                        if (opP.equals("(")) {
                                                            opP = arg1P;
                                                            arg1P = pilaP.pop();
                                                        } else if (arg1P.equals("(")) {
                                                            arg1P = pilaP.pop();
                                                        }
                                                        String TempP = "$t" + temp;
                                                        Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                        cuadruplos.add(cuadP);
                                                        pilaP.push(TempP);
                                                        temp++;
                                                    }
                                                    Cuadruplo cuad = new Cuadruplo("PARAM", pilaP.pop());
                                                    cuadruplos.add(cuad);
                                                }
                                                j--;
                                                Cuadruplo cuad = new Cuadruplo("CALL", id1);
                                                cuadruplos.add(cuad);
                                                String Temp = "$t" + temp;
                                                Cuadruplo cuad1 = new Cuadruplo("=", "RET", "", Temp);
                                                cuadruplos.add(cuad1);
                                                pila.push(Temp);
                                                temp++;
                                            }
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j += 2;
                                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                                if (tup.get(j + 1).getDominio().contains("Llamada Funcion")) {
                                                    j += 2;
                                                    while (j < tup.size() && tup.get(j).getDominio().contains("Parametros")) {
                                                        int param_num = Integer.parseInt(tup.get(j + 1).getDominio().substring(0, tup.get(j + 1).getDominio().indexOf("_")));
                                                        j++;
                                                        ArrayList<Tupla> tupP = new ArrayList();
                                                        while (j < tup.size() && Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))) <= param_num) {
                                                            tupP.add(tup.get(j));
                                                            j++;
                                                        }
                                                        Stack<String> pilaP = new Stack();
                                                        Stack<Integer> pilaParP = new Stack();
                                                        boolean expreP = false;
                                                        for (int jP = 0; jP < tupP.size(); jP++) {
                                                            if (tupP.get(jP).getRango().contains("Auto")) {
                                                                String operP = "";
                                                                if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                    operP = "*";
                                                                } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                    operP = "+";
                                                                } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                    operP = "-";
                                                                } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                    operP = "/";
                                                                }
                                                                String oper1P;
                                                                if (tupP.get(jP).getRango().contains("Incremento")) {
                                                                    oper1P = "+";
                                                                } else {
                                                                    oper1P = "-";
                                                                }
                                                                if (pilaP.size() > 0) {
                                                                    boolean seguirP = true;
                                                                    if (pilaParP.size() > 0) {
                                                                        if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                            seguirP = false;
                                                                            pilaParP.pop();
                                                                            jP--;
                                                                        }
                                                                    }
                                                                    if (seguirP) {
                                                                        if (pilaP.peek().equals(operP)) {
                                                                            jP += 2;
                                                                            String id1P = tup.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                            String TempP = "$t" + temp;
                                                                            Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                            cuadruplos.add(cuadP);
                                                                            Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                            cuadruplos.add(cuad1P);
                                                                            temp++;
                                                                            pilaP.push(id1P);
                                                                        } else {
                                                                            if (expreP) {
                                                                                jP += 2;
                                                                                String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                                cuadruplos.add(cuad1P);
                                                                                temp++;
                                                                                pilaP.push(id1P);
                                                                                expreP = false;
                                                                            } else {
                                                                                boolean entrarP = true;
                                                                                if (pilaP.size() >= 3) {
                                                                                    String arg2P = pilaP.pop();
                                                                                    String opP = pilaP.pop();
                                                                                    String arg1P = pilaP.pop();
                                                                                    if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                        if (operP.equals("+") | operP.equals("-")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            if (opP.equals("*") | opP.equals("/")) {
                                                                                                String TempP = "$t" + temp;
                                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                                cuadruplos.add(cuadP);
                                                                                                pilaP.push(TempP);
                                                                                                temp++;
                                                                                                entrarP = false;
                                                                                            } else {
                                                                                                pilaP.push(arg1P);
                                                                                                pilaP.push(opP);
                                                                                                pilaP.push(arg2P);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                                if (entrarP) {
                                                                                    pilaP.push(operP);
                                                                                    jP += 2;
                                                                                    String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                                    cuadruplos.add(cuad1P);
                                                                                    temp++;
                                                                                    pilaP.push(id1P);
                                                                                } else {
                                                                                    jP--;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        boolean parP = true;
                                                                        while (parP) {
                                                                            String arg2P = pilaP.pop();
                                                                            if (!pilaP.peek().equals("(")) {
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                            } else {
                                                                                parP = false;
                                                                                pilaP.pop();
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    jP += 2;
                                                                    String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                    cuadruplos.add(cuad1P);
                                                                    temp++;
                                                                    pilaP.push(id1P);
                                                                    if (!operP.equals("")) {
                                                                        pilaP.push(operP);
                                                                    }
                                                                }
                                                            } else if (tupP.get(jP).getRango().contains("ID") | tupP.get(jP).getRango().contains("Num") | tupP.get(jP).getRango().contains("Caracter")) {
                                                                String operP = "";
                                                                if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                    operP = "*";
                                                                } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                    operP = "+";
                                                                } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                    operP = "-";
                                                                } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                    operP = "/";
                                                                }
                                                                if (pilaP.size() > 0) {
                                                                    boolean seguirP = true;
                                                                    if (pilaParP.size() > 0) {
                                                                        if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                            seguirP = false;
                                                                            pilaParP.pop();
                                                                            jP--;
                                                                        }
                                                                    }
                                                                    if (seguirP) {
                                                                        if (pilaP.peek().equals(operP)) {
                                                                            jP++;
                                                                            pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                        } else {
                                                                            if (expreP) {
                                                                                jP++;
                                                                                pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                                expreP = false;
                                                                            } else {
                                                                                boolean entrarP = true;
                                                                                if (pilaP.size() >= 3) {
                                                                                    String arg2P = pilaP.pop();
                                                                                    String opP = pilaP.pop();
                                                                                    String arg1P = pilaP.pop();
                                                                                    if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                        if (operP.equals("+") | operP.equals("-")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            if (opP.equals("*") | opP.equals("/")) {
                                                                                                String TempP = "$t" + temp;
                                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                                cuadruplos.add(cuadP);
                                                                                                pilaP.push(TempP);
                                                                                                temp++;
                                                                                                entrarP = false;
                                                                                            } else {
                                                                                                pilaP.push(arg1P);
                                                                                                pilaP.push(opP);
                                                                                                pilaP.push(arg2P);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                                if (entrarP) {
                                                                                    pilaP.push(operP);
                                                                                    jP++;
                                                                                    pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                                } else {
                                                                                    jP--;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        boolean parP = true;
                                                                        while (parP) {
                                                                            String arg2P = pilaP.pop();
                                                                            if (!pilaP.peek().equals("(")) {
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                            } else {
                                                                                parP = false;
                                                                                pilaP.pop();
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                    }
                                                                } else {
                                                                    jP++;
                                                                    pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                    if (!operP.equals("")) {
                                                                        pilaP.push(operP);
                                                                    }
                                                                }
                                                            } else if (tupP.get(jP).getRango().contains("Expresion")) {
                                                                String operP = "";
                                                                if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                                    operP = "*";
                                                                } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                                    operP = "+";
                                                                } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                                    operP = "-";
                                                                } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                                    operP = "/";
                                                                } else if (tupP.get(jP).getDominio().contains("Parentesis")) {
                                                                    operP = "(";
                                                                    pilaP.push(operP);
                                                                    pilaParP.push(Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_"))));
                                                                }
                                                                if (pilaP.size() > 0 && !operP.equals("(")) {
                                                                    boolean seguirP = true;
                                                                    if (pilaParP.size() > 0) {
                                                                        if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                            seguirP = false;
                                                                            pilaParP.pop();
                                                                            jP--;
                                                                        }
                                                                    }
                                                                    if (seguirP) {
                                                                        expreP = true;
                                                                        if (!pilaP.peek().equals(operP)) {
                                                                            if (!(pilaP.peek().equals("+") | pilaP.peek().equals("*") | pilaP.peek().equals("/") | pilaP.peek().equals("-") | pilaP.peek().equals("("))) {
                                                                                boolean entrarP = true;
                                                                                if (pilaP.size() >= 3) {
                                                                                    String arg2P = pilaP.pop();
                                                                                    String opP = pilaP.pop();
                                                                                    String arg1P = pilaP.pop();
                                                                                    if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                                        if (operP.equals("+") | operP.equals("-")) {
                                                                                            String TempP = "$t" + temp;
                                                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                            cuadruplos.add(cuadP);
                                                                                            pilaP.push(TempP);
                                                                                            temp++;
                                                                                            entrarP = false;
                                                                                        } else {
                                                                                            if (opP.equals("*") | opP.equals("/")) {
                                                                                                String TempP = "$t" + temp;
                                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                                cuadruplos.add(cuadP);
                                                                                                pilaP.push(TempP);
                                                                                                temp++;
                                                                                                entrarP = false;
                                                                                            } else {
                                                                                                pilaP.push(arg1P);
                                                                                                pilaP.push(opP);
                                                                                                pilaP.push(arg2P);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        pilaP.push(arg1P);
                                                                                        pilaP.push(opP);
                                                                                        pilaP.push(arg2P);
                                                                                    }
                                                                                }
                                                                                if (entrarP) {
                                                                                    pilaP.push(operP);
                                                                                } else {
                                                                                    jP--;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        boolean parP = true;
                                                                        while (parP) {
                                                                            String arg2P = pilaP.pop();
                                                                            if (!pilaP.peek().equals("(")) {
                                                                                String opP = pilaP.pop();
                                                                                String arg1P = pilaP.pop();
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                            } else {
                                                                                parP = false;
                                                                                pilaP.pop();
                                                                                pilaP.push(arg2P);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        while (pilaP.size() > 1) {
                                                            String arg2P = pilaP.pop();
                                                            String opP = pilaP.pop();
                                                            String arg1P = pilaP.pop();
                                                            if (opP.equals("(")) {
                                                                opP = arg1P;
                                                                arg1P = pilaP.pop();
                                                            } else if (arg1P.equals("(")) {
                                                                arg1P = pilaP.pop();
                                                            }
                                                            String TempP = "$t" + temp;
                                                            Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                            cuadruplos.add(cuadP);
                                                            pilaP.push(TempP);
                                                            temp++;
                                                        }
                                                        Cuadruplo cuad = new Cuadruplo("PARAM", pilaP.pop());
                                                        cuadruplos.add(cuad);
                                                    }
                                                    j--;
                                                    Cuadruplo cuad = new Cuadruplo("CALL", id1);
                                                    cuadruplos.add(cuad);
                                                    if (!llamada) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad1 = new Cuadruplo("=", "RET", "", Temp);
                                                        cuadruplos.add(cuad1);
                                                        pila.push(Temp);
                                                        temp++;
                                                    }
                                                }
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j += 2;
                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                if (j + 1 < tup.size()) {
                                    if (tup.get(j + 1).getDominio().contains("Llamada Funcion")) {
                                        j += 2;
                                        while (j < tup.size() && tup.get(j).getDominio().contains("Parametros")) {
                                            int param_num = Integer.parseInt(tup.get(j + 1).getDominio().substring(0, tup.get(j + 1).getDominio().indexOf("_")));
                                            j++;
                                            ArrayList<Tupla> tupP = new ArrayList();
                                            while (j < tup.size() && Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))) <= param_num) {
                                                tupP.add(tup.get(j));
                                                j++;
                                            }
                                            Stack<String> pilaP = new Stack();
                                            Stack<Integer> pilaParP = new Stack();
                                            boolean expreP = false;
                                            for (int jP = 0; jP < tupP.size(); jP++) {
                                                if (tupP.get(jP).getRango().contains("Auto")) {
                                                    String operP = "";
                                                    if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                        operP = "*";
                                                    } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                        operP = "+";
                                                    } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                        operP = "-";
                                                    } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                        operP = "/";
                                                    }
                                                    String oper1P;
                                                    if (tupP.get(jP).getRango().contains("Incremento")) {
                                                        oper1P = "+";
                                                    } else {
                                                        oper1P = "-";
                                                    }
                                                    if (pilaP.size() > 0) {
                                                        boolean seguirP = true;
                                                        if (pilaParP.size() > 0) {
                                                            if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                seguirP = false;
                                                                pilaParP.pop();
                                                                jP--;
                                                            }
                                                        }
                                                        if (seguirP) {
                                                            if (pilaP.peek().equals(operP)) {
                                                                jP += 2;
                                                                String id1P = tup.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                String TempP = "$t" + temp;
                                                                Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                cuadruplos.add(cuadP);
                                                                Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                cuadruplos.add(cuad1P);
                                                                temp++;
                                                                pilaP.push(id1P);
                                                            } else {
                                                                if (expreP) {
                                                                    jP += 2;
                                                                    String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                    cuadruplos.add(cuad1P);
                                                                    temp++;
                                                                    pilaP.push(id1P);
                                                                    expreP = false;
                                                                } else {
                                                                    boolean entrarP = true;
                                                                    if (pilaP.size() >= 3) {
                                                                        String arg2P = pilaP.pop();
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                            if (operP.equals("+") | operP.equals("-")) {
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                                entrarP = false;
                                                                            } else {
                                                                                if (opP.equals("*") | opP.equals("/")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            pilaP.push(arg1P);
                                                                            pilaP.push(opP);
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                    if (entrarP) {
                                                                        pilaP.push(operP);
                                                                        jP += 2;
                                                                        String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                                        String TempP = "$t" + temp;
                                                                        Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                                        cuadruplos.add(cuadP);
                                                                        Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                                        cuadruplos.add(cuad1P);
                                                                        temp++;
                                                                        pilaP.push(id1P);
                                                                    } else {
                                                                        jP--;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            boolean parP = true;
                                                            while (parP) {
                                                                String arg2P = pilaP.pop();
                                                                if (!pilaP.peek().equals("(")) {
                                                                    String opP = pilaP.pop();
                                                                    String arg1P = pilaP.pop();
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    pilaP.push(TempP);
                                                                    temp++;
                                                                } else {
                                                                    parP = false;
                                                                    pilaP.pop();
                                                                    pilaP.push(arg2P);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        jP += 2;
                                                        String id1P = tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1);
                                                        String TempP = "$t" + temp;
                                                        Cuadruplo cuadP = new Cuadruplo(oper1P, id1P, "1", TempP);
                                                        cuadruplos.add(cuadP);
                                                        Cuadruplo cuad1P = new Cuadruplo("=", TempP, "", id1P);
                                                        cuadruplos.add(cuad1P);
                                                        temp++;
                                                        pilaP.push(id1P);
                                                        if (!operP.equals("")) {
                                                            pilaP.push(operP);
                                                        }
                                                    }
                                                } else if (tupP.get(jP).getRango().contains("ID") | tupP.get(jP).getRango().contains("Num") | tupP.get(jP).getRango().contains("Caracter")) {
                                                    String operP = "";
                                                    if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                        operP = "*";
                                                    } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                        operP = "+";
                                                    } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                        operP = "-";
                                                    } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                        operP = "/";
                                                    }
                                                    if (pilaP.size() > 0) {
                                                        boolean seguirP = true;
                                                        if (pilaParP.size() > 0) {
                                                            if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                seguirP = false;
                                                                pilaParP.pop();
                                                                jP--;
                                                            }
                                                        }
                                                        if (seguirP) {
                                                            if (pilaP.peek().equals(operP)) {
                                                                jP++;
                                                                pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                            } else {
                                                                if (expreP) {
                                                                    jP++;
                                                                    pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                    expreP = false;
                                                                } else {
                                                                    boolean entrarP = true;
                                                                    if (pilaP.size() >= 3) {
                                                                        String arg2P = pilaP.pop();
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                            if (operP.equals("+") | operP.equals("-")) {
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                                entrarP = false;
                                                                            } else {
                                                                                if (opP.equals("*") | opP.equals("/")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            pilaP.push(arg1P);
                                                                            pilaP.push(opP);
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                    if (entrarP) {
                                                                        pilaP.push(operP);
                                                                        jP++;
                                                                        pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                                    } else {
                                                                        jP--;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            boolean parP = true;
                                                            while (parP) {
                                                                String arg2P = pilaP.pop();
                                                                if (!pilaP.peek().equals("(")) {
                                                                    String opP = pilaP.pop();
                                                                    String arg1P = pilaP.pop();
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    pilaP.push(TempP);
                                                                    temp++;
                                                                } else {
                                                                    parP = false;
                                                                    pilaP.pop();
                                                                    pilaP.push(arg2P);
                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        jP++;
                                                        pilaP.push(tupP.get(jP).getRango().substring(tupP.get(jP).getRango().indexOf("_") + 1));
                                                        if (!operP.equals("")) {
                                                            pilaP.push(operP);
                                                        }
                                                    }
                                                } else if (tupP.get(jP).getRango().contains("Expresion")) {
                                                    String operP = "";
                                                    if (tupP.get(jP).getDominio().contains("Multiplicacion")) {
                                                        operP = "*";
                                                    } else if (tupP.get(jP).getDominio().contains("Suma")) {
                                                        operP = "+";
                                                    } else if (tupP.get(jP).getDominio().contains("Resta")) {
                                                        operP = "-";
                                                    } else if (tupP.get(jP).getDominio().contains("Division")) {
                                                        operP = "/";
                                                    } else if (tupP.get(jP).getDominio().contains("Parentesis")) {
                                                        operP = "(";
                                                        pilaP.push(operP);
                                                        pilaParP.push(Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_"))));
                                                    }
                                                    if (pilaP.size() > 0 && !operP.equals("(")) {
                                                        boolean seguirP = true;
                                                        if (pilaParP.size() > 0) {
                                                            if (pilaParP.peek() < Integer.parseInt(tupP.get(jP).getDominio().substring(0, tupP.get(jP).getDominio().indexOf("_")))) {
                                                                seguirP = false;
                                                                pilaParP.pop();
                                                                jP--;
                                                            }
                                                        }
                                                        if (seguirP) {
                                                            expreP = true;
                                                            if (!pilaP.peek().equals(operP)) {
                                                                if (!(pilaP.peek().equals("+") | pilaP.peek().equals("*") | pilaP.peek().equals("/") | pilaP.peek().equals("-") | pilaP.peek().equals("("))) {
                                                                    boolean entrarP = true;
                                                                    if (pilaP.size() >= 3) {
                                                                        String arg2P = pilaP.pop();
                                                                        String opP = pilaP.pop();
                                                                        String arg1P = pilaP.pop();
                                                                        if (!arg2P.equals("(") && !opP.equals("(") && !arg1P.equals("(")) {
                                                                            if (operP.equals("+") | operP.equals("-")) {
                                                                                String TempP = "$t" + temp;
                                                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                cuadruplos.add(cuadP);
                                                                                pilaP.push(TempP);
                                                                                temp++;
                                                                                entrarP = false;
                                                                            } else {
                                                                                if (opP.equals("*") | opP.equals("/")) {
                                                                                    String TempP = "$t" + temp;
                                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                                    cuadruplos.add(cuadP);
                                                                                    pilaP.push(TempP);
                                                                                    temp++;
                                                                                    entrarP = false;
                                                                                } else {
                                                                                    pilaP.push(arg1P);
                                                                                    pilaP.push(opP);
                                                                                    pilaP.push(arg2P);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            pilaP.push(arg1P);
                                                                            pilaP.push(opP);
                                                                            pilaP.push(arg2P);
                                                                        }
                                                                    }
                                                                    if (entrarP) {
                                                                        pilaP.push(operP);
                                                                    } else {
                                                                        jP--;
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            boolean parP = true;
                                                            while (parP) {
                                                                String arg2P = pilaP.pop();
                                                                if (!pilaP.peek().equals("(")) {
                                                                    String opP = pilaP.pop();
                                                                    String arg1P = pilaP.pop();
                                                                    String TempP = "$t" + temp;
                                                                    Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                                    cuadruplos.add(cuadP);
                                                                    pilaP.push(TempP);
                                                                    temp++;
                                                                } else {
                                                                    parP = false;
                                                                    pilaP.pop();
                                                                    pilaP.push(arg2P);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            while (pilaP.size() > 1) {
                                                String arg2P = pilaP.pop();
                                                String opP = pilaP.pop();
                                                String arg1P = pilaP.pop();
                                                if (opP.equals("(")) {
                                                    opP = arg1P;
                                                    arg1P = pilaP.pop();
                                                } else if (arg1P.equals("(")) {
                                                    arg1P = pilaP.pop();
                                                }
                                                String TempP = "$t" + temp;
                                                Cuadruplo cuadP = new Cuadruplo(opP, arg1P, arg2P, TempP);
                                                cuadruplos.add(cuadP);
                                                pilaP.push(TempP);
                                                temp++;
                                            }
                                            Cuadruplo cuad = new Cuadruplo("PARAM", pilaP.pop());
                                            cuadruplos.add(cuad);
                                        }
                                        j--;

                                    }
                                }
                                Cuadruplo cuad = new Cuadruplo("CALL", id1);
                                cuadruplos.add(cuad);
                                if (!llamada) {
                                    String Temp = "$t" + temp;
                                    Cuadruplo cuad1 = new Cuadruplo("=", "RET", "", Temp);
                                    cuadruplos.add(cuad1);
                                    pila.push(Temp);
                                    temp++;
                                }
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("Expresion")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            } else if (tup.get(j).getDominio().contains("Parentesis")) {
                                oper = "(";
                                pila.push(oper);
                                pilaPar.push(Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))));
                            }
                            if (pila.size() > 0 && !oper.equals("(")) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    expre = true;
                                    if (!pila.peek().equals(oper)) {
                                        if (!(pila.peek().equals("+") | pila.peek().equals("*") | pila.peek().equals("/") | pila.peek().equals("-") | pila.peek().equals("("))) {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    while (pila.size() > 1) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        if (op.equals("(")) {
                            op = arg1;
                            arg1 = pila.pop();
                        } else if (arg1.equals("(")) {
                            arg1 = pila.pop();
                        }
                        String Temp = "$t" + temp;
                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                        cuadruplos.add(cuad);
                        pila.push(Temp);
                        temp++;
                    }
                    if (!llamada) {
                        if (!retornar) {
                            Cuadruplo cuad = new Cuadruplo("=", pila.pop(), "", id);
                            cuadruplos.add(cuad);
                        } else {
                            Cuadruplo cuad = new Cuadruplo("RETURN", pila.pop());
                            cuadruplos.add(cuad);
                        }
                    }

                    // If 
                } else if (tuplas.get(i).getRango().contains("_If")) {
                    Stack<String> pila = new Stack();
                    Stack<Integer> pilaAnd = new Stack();
                    int falso = etiq++, verdadero = etiq++, cont = 0;
                    i += 2;
                    boolean entro = false;
                    while (tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1).contains("And")) {
                        cont++;
                        i++;
                        entro = true;
                    }
                    if (entro) {
                        i--;
                    }
                    boolean and = false;
                    if (cont > 0) {
                        and = true;
                    }
                    while (!tuplas.get(i).getRango().contains("Declaracion")) {
                        String oper = "";
                        if (tuplas.get(i).getDominio().contains("Menor Igual")) {
                            oper = "<=";
                        } else if (tuplas.get(i).getDominio().contains("Mayor Igual")) {
                            oper = ">=";
                        } else if (tuplas.get(i).getDominio().contains("Igualdad")) {
                            oper = "==";
                        } else if (tuplas.get(i).getDominio().contains("Diferencia")) {
                            oper = "!=";
                        } else if (tuplas.get(i).getDominio().contains("Menor")) {
                            oper = "<";
                        } else if (tuplas.get(i).getDominio().contains("Mayor")) {
                            oper = ">";
                        }
                        if (tuplas.get(i).getRango().contains("ID") | tuplas.get(i).getRango().contains("Num")) {
                            if (pila.size() > 0 && pila.peek().equals(oper)) {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                            } else {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tuplas.get(i).getRango().contains("Expresion")) {
                            if (pila.size() > 0 && !pila.peek().equals(oper) && !(pila.peek().equals("<=") | pila.peek().equals(">=") | pila.peek().equals("!=") | pila.peek().equals("==") | pila.peek().equals("<") | pila.peek().equals(">")) && pila.size() == 3) {
                                String arg2 = pila.pop();
                                String op = pila.pop();
                                String arg1 = pila.pop();
                                if (and) {
                                    if (tuplas.get(i).getDominio().contains("And")) {
                                        int temporal;
                                        if (pilaAnd.size() == 0) {
                                            pilaAnd.push(etiq);
                                            etiq++;
                                        }
                                        cont--;
                                        temporal = pilaAnd.pop();
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + temporal);
                                        cuadruplos.add(cuad2);
                                    } else if (tuplas.get(i).getDominio().contains("Or")) {
                                        int temporal;
                                        if (cont == 0) {
                                            temporal = verdadero;
                                        } else {
                                            if (pilaAnd.size() == 0) {
                                                pilaAnd.push(etiq);
                                                etiq++;
                                            }
                                            temporal = pilaAnd.peek();
                                        }
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                        cuadruplos.add(cuad2);
                                        etiq++;
                                    }
                                } else {
                                    Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                                    cuadruplos.add(cuad);
                                    Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                    cuadruplos.add(cuad1);
                                    Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                    cuadruplos.add(cuad2);
                                    etiq++;
                                }
                            }
                        }
                        i++;
                    }
                    i--;
                    if (pila.size() > 0) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                        cuadruplos.add(cuad);
                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                        cuadruplos.add(cuad1);
                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + verdadero);
                        cuadruplos.add(cuad2);
                        superpila.push("e" + falso);
                        supernums.push(Integer.parseInt(tuplas.get(i + 1).getDominio().substring(0, tuplas.get(i + 1).getDominio().indexOf("_"))));
                    }

                    // Else
                } else if (tuplas.get(i).getRango().contains("_Else")) {
                    Cuadruplo cuad = new Cuadruplo("GOTO", "e" + etiq);
                    cuadruplos.add(cuad);
                    Cuadruplo cuad1 = new Cuadruplo("ETIQ", superpila.pop());
                    cuadruplos.add(cuad1);
                    supernums.pop();
                    superpila.push("e" + etiq);
                    supernums.push(Integer.parseInt(tuplas.get(i + 1).getDominio().substring(0, tuplas.get(i + 1).getDominio().indexOf("_"))));
                    etiq++;

                    // While
                } else if (tuplas.get(i).getRango().contains("_While")) {
                    Stack<String> pila = new Stack();
                    Stack<Integer> pilaAnd = new Stack();
                    int regreso = etiq++, falso = etiq++, verdadero = etiq++, cont = 0;
                    int numregreso = Integer.parseInt(tuplas.get(i + 1).getDominio().substring(0, tuplas.get(i + 1).getDominio().indexOf("_")));
                    Cuadruplo supercuad = new Cuadruplo("ETIQ", "e" + regreso);
                    cuadruplos.add(supercuad);
                    i += 2;
                    boolean entro = false;
                    while (tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1).contains("And")) {
                        cont++;
                        i++;
                        entro = true;
                    }
                    if (entro) {
                        i--;
                    }
                    boolean and = false;
                    if (cont > 0) {
                        and = true;
                    }
                    while (!tuplas.get(i).getRango().contains("Declaracion")) {
                        String oper = "";
                        if (tuplas.get(i).getDominio().contains("Menor Igual")) {
                            oper = "<=";
                        } else if (tuplas.get(i).getDominio().contains("Mayor Igual")) {
                            oper = ">=";
                        } else if (tuplas.get(i).getDominio().contains("Igualdad")) {
                            oper = "==";
                        } else if (tuplas.get(i).getDominio().contains("Diferencia")) {
                            oper = "!=";
                        } else if (tuplas.get(i).getDominio().contains("Menor")) {
                            oper = "<";
                        } else if (tuplas.get(i).getDominio().contains("Mayor")) {
                            oper = ">";
                        }
                        if (tuplas.get(i).getRango().contains("ID") | tuplas.get(i).getRango().contains("Num")) {
                            if (pila.size() > 0 && pila.peek().equals(oper)) {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                            } else {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tuplas.get(i).getRango().contains("Expresion")) {
                            if (pila.size() > 0 && !pila.peek().equals(oper) && !(pila.peek().equals("<=") | pila.peek().equals(">=") | pila.peek().equals("!=") | pila.peek().equals("==") | pila.peek().equals("<") | pila.peek().equals(">")) && pila.size() == 3) {
                                String arg2 = pila.pop();
                                String op = pila.pop();
                                String arg1 = pila.pop();
                                if (and) {
                                    if (tuplas.get(i).getDominio().contains("And")) {
                                        int temporal;
                                        if (pilaAnd.size() == 0) {
                                            pilaAnd.push(etiq);
                                            etiq++;
                                            cont--;
                                        }
                                        temporal = pilaAnd.pop();
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + temporal);
                                        cuadruplos.add(cuad2);
                                    } else if (tuplas.get(i).getDominio().contains("Or")) {
                                        int temporal;
                                        if (cont == 0) {
                                            temporal = verdadero;
                                        } else {
                                            if (pilaAnd.size() == 0) {
                                                pilaAnd.push(etiq);
                                                etiq++;
                                            }
                                            temporal = pilaAnd.peek();
                                        }
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                        cuadruplos.add(cuad2);
                                        etiq++;
                                    }
                                } else {
                                    Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                                    cuadruplos.add(cuad);
                                    Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                    cuadruplos.add(cuad1);
                                    Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                    cuadruplos.add(cuad2);
                                    etiq++;
                                }
                            }
                        }
                        i++;
                    }
                    i--;
                    if (pila.size() > 0) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                        cuadruplos.add(cuad);
                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                        cuadruplos.add(cuad1);
                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + verdadero);
                        cuadruplos.add(cuad2);
                        superpila.push("e" + falso);
                        supernums.push(Integer.parseInt(tuplas.get(i + 1).getDominio().substring(0, tuplas.get(i + 1).getDominio().indexOf("_"))));
                        superpila.push("e" + regreso);
                        supernums.push(numregreso);
                        superpila.push("*");
                    }

                    // For
                } else if (tuplas.get(i).getRango().contains("_For")) {
                    i += 2;
                    ArrayList<Tupla> tup = new ArrayList();
                    while (i < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getRango().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getRango().contains("_Else") && !tuplas.get(i).getDominio().contains("_For")) {
                        tup.add(tuplas.get(i));
                        i++;
                    }
                    i--;
                    if (tup.get(0).getDominio().contains("_Expresion")) {
                        tup.remove(tup.get(0));
                    }
                    Stack<String> pila = new Stack();
                    Stack<Integer> pilaPar = new Stack();
                    String id = tup.get(1).getRango().substring(tup.get(1).getRango().indexOf("_") + 1);
                    boolean expre = false;
                    for (int j = 2; j < tup.size(); j++) {
                        if (tup.get(j).getRango().contains("Auto")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            String oper1;
                            if (tup.get(j).getRango().contains("Incremento")) {
                                oper1 = "+";
                            } else {
                                oper1 = "-";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j += 2;
                                        String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                        String Temp = "$t" + temp;
                                        Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                        cuadruplos.add(cuad1);
                                        temp++;
                                        pila.push(id1);
                                    } else {
                                        if (expre) {
                                            j += 2;
                                            String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                            cuadruplos.add(cuad);
                                            Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                            cuadruplos.add(cuad1);
                                            temp++;
                                            pila.push(id1);
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j += 2;
                                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                                String Temp = "$t" + temp;
                                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                                cuadruplos.add(cuad);
                                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                                cuadruplos.add(cuad1);
                                                temp++;
                                                pila.push(id1);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j += 2;
                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                String Temp = "$t" + temp;
                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                cuadruplos.add(cuad);
                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                cuadruplos.add(cuad1);
                                temp++;
                                pila.push(id1);
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("ID") | tup.get(j).getRango().contains("Num") | tup.get(j).getRango().contains("Caracter")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j++;
                                        pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                    } else {
                                        if (expre) {
                                            j++;
                                            pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j++;
                                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j++;
                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("Expresion")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            } else if (tup.get(j).getDominio().contains("Parentesis")) {
                                oper = "(";
                                pila.push(oper);
                                pilaPar.push(Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))));
                            }
                            if (pila.size() > 0 && !oper.equals("(")) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    expre = true;
                                    if (!pila.peek().equals(oper)) {
                                        if (!(pila.peek().equals("+") | pila.peek().equals("*") | pila.peek().equals("/") | pila.peek().equals("-") | pila.peek().equals("("))) {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    while (pila.size() > 1) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        if (op.equals("(")) {
                            op = arg1;
                            arg1 = pila.pop();
                        } else if (arg1.equals("(")) {
                            arg1 = pila.pop();
                        }
                        String Temp = "$t" + temp;
                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                        cuadruplos.add(cuad);
                        pila.push(Temp);
                        temp++;
                    }
                    Cuadruplo cuad0 = new Cuadruplo("=", pila.pop(), "", id);
                    cuadruplos.add(cuad0);

                    // ********************************************* 2
                    pila = new Stack();
                    Stack<Integer> pilaAnd = new Stack();
                    int regreso = etiq++, falso = etiq++, verdadero = etiq++, cont = 0;
                    Cuadruplo supercuad = new Cuadruplo("ETIQ", "e" + regreso);
                    cuadruplos.add(supercuad);
                    i += 2;
                    boolean entro = false;
                    while (tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1).contains("And")) {
                        cont++;
                        i++;
                        entro = true;
                    }
                    if (entro) {
                        i--;
                    }
                    boolean and = false;
                    if (cont > 0) {
                        and = true;
                    }
                    while (!tuplas.get(i).getDominio().contains("For")) {
                        String oper = "";
                        if (tuplas.get(i).getDominio().contains("Menor Igual")) {
                            oper = "<=";
                        } else if (tuplas.get(i).getDominio().contains("Mayor Igual")) {
                            oper = ">=";
                        } else if (tuplas.get(i).getDominio().contains("Igualdad")) {
                            oper = "==";
                        } else if (tuplas.get(i).getDominio().contains("Diferencia")) {
                            oper = "!=";
                        } else if (tuplas.get(i).getDominio().contains("Menor")) {
                            oper = "<";
                        } else if (tuplas.get(i).getDominio().contains("Mayor")) {
                            oper = ">";
                        }
                        if (tuplas.get(i).getRango().contains("ID") | tuplas.get(i).getRango().contains("Num")) {
                            if (pila.size() > 0 && pila.peek().equals(oper)) {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                            } else {
                                i++;
                                pila.push(tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tuplas.get(i).getRango().contains("Expresion")) {
                            if (pila.size() > 0 && !pila.peek().equals(oper) && !(pila.peek().equals("<=") | pila.peek().equals(">=") | pila.peek().equals("!=") | pila.peek().equals("==") | pila.peek().equals("<") | pila.peek().equals(">")) && pila.size() == 3) {
                                String arg2 = pila.pop();
                                String op = pila.pop();
                                String arg1 = pila.pop();
                                if (and) {
                                    if (tuplas.get(i).getDominio().contains("And")) {
                                        int temporal;
                                        if (pilaAnd.size() == 0) {
                                            pilaAnd.push(etiq);
                                            etiq++;
                                            cont--;
                                        }
                                        temporal = pilaAnd.pop();
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + temporal);
                                        cuadruplos.add(cuad2);
                                    } else if (tuplas.get(i).getDominio().contains("Or")) {
                                        int temporal;
                                        if (cont == 0) {
                                            temporal = verdadero;
                                        } else {
                                            if (pilaAnd.size() == 0) {
                                                pilaAnd.push(etiq);
                                                etiq++;
                                            }
                                            temporal = pilaAnd.peek();
                                        }
                                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + temporal);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                        cuadruplos.add(cuad1);
                                        Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                        cuadruplos.add(cuad2);
                                        etiq++;
                                    }
                                } else {
                                    Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                                    cuadruplos.add(cuad);
                                    Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + etiq);
                                    cuadruplos.add(cuad1);
                                    Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + etiq);
                                    cuadruplos.add(cuad2);
                                    etiq++;
                                }
                            }
                        }
                        i++;
                    }
                    i--;
                    if (pila.size() > 0) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        Cuadruplo cuad = new Cuadruplo("IF" + op, arg1, arg2, "e" + verdadero);
                        cuadruplos.add(cuad);
                        Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + falso);
                        cuadruplos.add(cuad1);
                        superpila.push("e" + falso);
                        supernums.push(Integer.parseInt(tuplas.get(i + 1).getDominio().substring(0, tuplas.get(i + 1).getDominio().indexOf("_"))));
                    }
                    i++;

                    // ***************************************************** 3
                    int regreso1 = etiq++;
                    int numregreso1 = Integer.parseInt(tuplas.get(i).getDominio().substring(0, tuplas.get(i).getDominio().indexOf("_")));
                    Cuadruplo supercuad1 = new Cuadruplo("ETIQ", "e" + regreso1);
                    cuadruplos.add(supercuad1);
                    i++;
                    tup = new ArrayList();
                    while (i < tuplas.size() && !tuplas.get(i).getDominio().contains("_Declaracion") && !tuplas.get(i).getRango().contains("_Declaracion") && !tuplas.get(i).getDominio().contains("_Inicio") && !tuplas.get(i).getRango().contains("_Else") && !tuplas.get(i).getDominio().contains("_For")) {
                        tup.add(tuplas.get(i));
                        i++;
                    }
                    i--;
                    pila = new Stack();
                    pilaPar = new Stack();
                    boolean retornar = !tup.get(1).getDominio().contains("Asignacion");
                    int num = 0;
                    if (!retornar) {
                        num = 3;
                    }
                    id = tup.get(2).getRango().substring(tup.get(2).getRango().indexOf("_") + 1);
                    expre = false;
                    for (int j = num; j < tup.size(); j++) {
                        if (tup.get(j).getRango().contains("Auto")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            String oper1;
                            if (tup.get(j).getRango().contains("Incremento")) {
                                oper1 = "+";
                            } else {
                                oper1 = "-";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j += 2;
                                        String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                        String Temp = "$t" + temp;
                                        Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                        cuadruplos.add(cuad);
                                        Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                        cuadruplos.add(cuad1);
                                        temp++;
                                        pila.push(id1);
                                    } else {
                                        if (expre) {
                                            j += 2;
                                            String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                            cuadruplos.add(cuad);
                                            Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                            cuadruplos.add(cuad1);
                                            temp++;
                                            pila.push(id1);
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j += 2;
                                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                                String Temp = "$t" + temp;
                                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                                cuadruplos.add(cuad);
                                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                                cuadruplos.add(cuad1);
                                                temp++;
                                                pila.push(id1);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j += 2;
                                String id1 = tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1);
                                String Temp = "$t" + temp;
                                Cuadruplo cuad = new Cuadruplo(oper1, id1, "1", Temp);
                                cuadruplos.add(cuad);
                                Cuadruplo cuad1 = new Cuadruplo("=", Temp, "", id1);
                                cuadruplos.add(cuad1);
                                temp++;
                                pila.push(id1);
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("ID") | tup.get(j).getRango().contains("Num") | tup.get(j).getRango().contains("Caracter")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            }
                            if (pila.size() > 0) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    if (pila.peek().equals(oper)) {
                                        j++;
                                        pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                    } else {
                                        if (expre) {
                                            j++;
                                            pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            expre = false;
                                        } else {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                                j++;
                                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            } else {
                                j++;
                                pila.push(tup.get(j).getRango().substring(tup.get(j).getRango().indexOf("_") + 1));
                                if (!oper.equals("")) {
                                    pila.push(oper);
                                }
                            }
                        } else if (tup.get(j).getRango().contains("Expresion")) {
                            String oper = "";
                            if (tup.get(j).getDominio().contains("Multiplicacion")) {
                                oper = "*";
                            } else if (tup.get(j).getDominio().contains("Suma")) {
                                oper = "+";
                            } else if (tup.get(j).getDominio().contains("Resta")) {
                                oper = "-";
                            } else if (tup.get(j).getDominio().contains("Division")) {
                                oper = "/";
                            } else if (tup.get(j).getDominio().contains("Parentesis")) {
                                oper = "(";
                                pila.push(oper);
                                pilaPar.push(Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_"))));
                            }
                            if (pila.size() > 0 && !oper.equals("(")) {
                                boolean seguir = true;
                                if (pilaPar.size() > 0) {
                                    if (pilaPar.peek() < Integer.parseInt(tup.get(j).getDominio().substring(0, tup.get(j).getDominio().indexOf("_")))) {
                                        seguir = false;
                                        pilaPar.pop();
                                        j--;
                                    }
                                }
                                if (seguir) {
                                    expre = true;
                                    if (!pila.peek().equals(oper)) {
                                        if (!(pila.peek().equals("+") | pila.peek().equals("*") | pila.peek().equals("/") | pila.peek().equals("-") | pila.peek().equals("("))) {
                                            boolean entrar = true;
                                            if (pila.size() >= 3) {
                                                String arg2 = pila.pop();
                                                String op = pila.pop();
                                                String arg1 = pila.pop();
                                                if (!arg2.equals("(") && !op.equals("(") && !arg1.equals("(")) {
                                                    if (oper.equals("+") | oper.equals("-")) {
                                                        String Temp = "$t" + temp;
                                                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                        cuadruplos.add(cuad);
                                                        pila.push(Temp);
                                                        temp++;
                                                        entrar = false;
                                                    } else {
                                                        if (op.equals("*") | op.equals("/")) {
                                                            String Temp = "$t" + temp;
                                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                                            cuadruplos.add(cuad);
                                                            pila.push(Temp);
                                                            temp++;
                                                            entrar = false;
                                                        } else {
                                                            pila.push(arg1);
                                                            pila.push(op);
                                                            pila.push(arg2);
                                                        }
                                                    }
                                                } else {
                                                    pila.push(arg1);
                                                    pila.push(op);
                                                    pila.push(arg2);
                                                }
                                            }
                                            if (entrar) {
                                                pila.push(oper);
                                            } else {
                                                j--;
                                            }
                                        }
                                    }
                                } else {
                                    boolean par = true;
                                    while (par) {
                                        String arg2 = pila.pop();
                                        if (!pila.peek().equals("(")) {
                                            String op = pila.pop();
                                            String arg1 = pila.pop();
                                            String Temp = "$t" + temp;
                                            Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                                            cuadruplos.add(cuad);
                                            pila.push(Temp);
                                            temp++;
                                        } else {
                                            par = false;
                                            pila.pop();
                                            pila.push(arg2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    while (pila.size() > 1) {
                        String arg2 = pila.pop();
                        String op = pila.pop();
                        String arg1 = pila.pop();
                        if (op.equals("(")) {
                            op = arg1;
                            arg1 = pila.pop();
                        } else if (arg1.equals("(")) {
                            arg1 = pila.pop();
                        }
                        String Temp = "$t" + temp;
                        Cuadruplo cuad = new Cuadruplo(op, arg1, arg2, Temp);
                        cuadruplos.add(cuad);
                        pila.push(Temp);
                        temp++;
                    }
                    if (!retornar) {
                        Cuadruplo cuad = new Cuadruplo("=", pila.pop(), "", id);
                        cuadruplos.add(cuad);
                    }
                    Cuadruplo cuad1 = new Cuadruplo("GOTO", "e" + regreso);
                    cuadruplos.add(cuad1);
                    Cuadruplo cuad2 = new Cuadruplo("ETIQ", "e" + verdadero);
                    cuadruplos.add(cuad2);
                    superpila.push("e" + regreso1);
                    supernums.push(numregreso1);
                    superpila.push("*");

                    // Printf
                } else if (tuplas.get(i).getRango().contains("_Printf")) {
                    i += 2;
                    String cadena = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    String id = "";
                    if (i + 1 < tuplas.size() && tuplas.get(i + 1).getDominio().contains("_Printf")) {
                        if (tuplas.get(i + 1).getRango().contains("_Apuntador")) {
                            i += 3;
                        } else {
                            i += 2;
                        }
                        id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    }
                    Cuadruplo cuad = new Cuadruplo("PRINTF", cadena, id, "");
                    cuadruplos.add(cuad);

                    // Scanf
                } else if (tuplas.get(i).getRango().contains("_Scanf")) {
                    i += 2;
                    String cadena = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    if (tuplas.get(i + 1).getRango().contains("_Ampersand")) {
                        i += 3;
                    } else {
                        i += 2;
                    }
                    String id = tuplas.get(i).getRango().substring(tuplas.get(i).getRango().indexOf("_") + 1);
                    Cuadruplo cuad = new Cuadruplo("SCANF", cadena, id, "");
                    cuadruplos.add(cuad);
                }
            }

            // Residuos
            while (superpila.size() > 0) {
                if (superpila.peek().equals("*")) {
                    superpila.pop();
                    Cuadruplo cuad = new Cuadruplo("GOTO", superpila.pop());
                    cuadruplos.add(cuad);
                } else {
                    Cuadruplo cuad = new Cuadruplo("ETIQ", superpila.pop());
                    cuadruplos.add(cuad);
                }
                supernums.pop();
            }

            System.out.println("*********************************************************");
            DefaultTableModel modelo = (DefaultTableModel) JT_cuadruplos.getModel();
            int count1 = modelo.getRowCount();

            for (int i = 0; i < count1; i++) {
                modelo.removeRow(0);
            }
            Font font = new Font("Verdana", Font.PLAIN, 12);
            JT_cuadruplos.setFont(font);
            JT_cuadruplos.setRowHeight(30);

            for (int i = 0; i < cuadruplos.size(); i++) {
                System.out.println(cuadruplos.get(i).toString());
                String[] fila = {cuadruplos.get(i).getOp(), cuadruplos.get(i).getArg1(), cuadruplos.get(i).getArg2(), cuadruplos.get(i).getRes()};
                modelo.addRow(fila);
            }

            DefaultTableModel modelo2 = (DefaultTableModel) JT_funciones.getModel();
            int count = modelo2.getRowCount();
            for (int i = 0; i < count; i++) {
                modelo2.removeRow(0);
            }
            Font font2 = new Font("Verdana", Font.PLAIN, 12);
            JT_funciones.setFont(font2);
            JT_funciones.setRowHeight(30);

            for (int i = 0; i < funciones.size(); i++) {
                String[] fila = {funciones.get(i).getTipo(), funciones.get(i).getId(), funciones.get(i).getClasificacion(), funciones.get(i).getParametros().toString()};
                modelo2.addRow(fila);
            }


            // Codigo Final
            tcontrol = new ArrayList();
            Tcontrol tcont = new Tcontrol("t0", "1", "");
            tcontrol.add(tcont);
            Tcontrol tcont1 = new Tcontrol("t1", "1", "");
            tcontrol.add(tcont1);
            Tcontrol tcont2 = new Tcontrol("t2", "1", "");
            tcontrol.add(tcont2);
            Tcontrol tcont3 = new Tcontrol("t3", "1", "");
            tcontrol.add(tcont3);
            Tcontrol tcont4 = new Tcontrol("t4", "1", "");
            tcontrol.add(tcont4);
            Tcontrol tcont5 = new Tcontrol("t5", "1", "");
            tcontrol.add(tcont5);
            Tcontrol tcont6 = new Tcontrol("t6", "1", "");
            tcontrol.add(tcont6);
            Tcontrol tcont7 = new Tcontrol("t7", "1", "");
            tcontrol.add(tcont7);
            Tcontrol tcont8 = new Tcontrol("t8", "1", "");
            tcontrol.add(tcont8);
            Tcontrol tcont9 = new Tcontrol("t9", "1", "");
            tcontrol.add(tcont9);
            String codigo_final = "";
            codigo_final += "         .data \n";
            for (int i = 0; i < tipos.size(); i++) {
                if (tipos.get(i).getFuncion().equals("$global")) {
                    if (tipos.get(i).getTipo().equals("char")) {
                        codigo_final += "_" + tipos.get(i).getId() + ":      .byte 0 \n";
                    } else {
                        codigo_final += "_" + tipos.get(i).getId() + ":      .word 0 \n";
                    }
                }
            }
            int contmsg = 1;
            tup_msg = new ArrayList();
            for (int i = 0; i < cuadruplos.size(); i++) {
                if (cuadruplos.get(i).getOp().equals("PRINTF")) {
                    String msj1 = "", msj2 = "";
                    if (cuadruplos.get(i).getArg1().contains("%d") | cuadruplos.get(i).getArg1().contains("%c")) {
                        int indice = cuadruplos.get(i).getArg1().indexOf("%");
                        msj1 = cuadruplos.get(i).getArg1().substring(0, indice);
                        msj2 = cuadruplos.get(i).getArg1().substring(indice + 2);
                    } else {
                        msj1 = cuadruplos.get(i).getArg1();
                    }
                    if (!msj1.equals("")) {
                        if (!getMsjDisp(msj1)) {
                            tup_msg.add(msj1);
                            codigo_final += "_msg" + contmsg + ":   .asciiz \"" + msj1 + "\"\n";
                            contmsg++;
                        }
                    }
                    if (!msj2.equals("")) {
                        if (!getMsjDisp(msj2)) {
                            tup_msg.add(msj2);
                            codigo_final += "_msg" + contmsg + ":   .asciiz \"" + msj2 + "\"\n";
                            contmsg++;
                        }
                    }
                }
            }
            codigo_final += "         .text\n";
            codigo_final += "         .globl main\n";
            String nombre_ambito = "";
            int num_a = 0, num_a2 = 0;
            for (int i = 0; i < cuadruplos.size(); i++) {
                if (cuadruplos.get(i).getOp().matches("FUNC")) {
                    nombre_ambito = cuadruplos.get(i).getArg1();
                    if (cuadruplos.get(i).getArg1().equals("main")) {
                        codigo_final += "main:\n";
                        codigo_final += "       move $fp, $sp\n";
                    } else {
                        codigo_final += "_" + cuadruplos.get(i).getArg1() + ":\n";
                        ArrayList<Parametro> params = getParam(cuadruplos.get(i).getArg1());
                        int param = params.size(), param2 = param;
                        if (param > 4) {
                            int acum = 0;
                            param2 = 4;
                            for (int j = 4; j < params.size(); j++) {
                                if (params.get(j).getTipo().equals("char")) {
                                    acum += 1;
                                    codigo_final += "       lb $s" + j + ", -" + acum + "($sp)\n";
                                } else {
                                    acum += 4;
                                    codigo_final += "       lw $s" + j + ", -" + acum + "($sp)\n";
                                }
                            }
                        }
                        eses = new ArrayList();
                        codigo_final += "       sw $fp, -4($sp)\n";
                        codigo_final += "       sw $ra, -8($sp)\n";
                        int num = 0, lastoffset = 0;
                        for (int j = 0; j < tipos.size(); j++) {
                            if (tipos.get(j).getFuncion().equals(cuadruplos.get(i).getArg1())) {
                                if (num < param) {
                                    if (tipos.get(j).getTipo().equals("char")) {
                                        codigo_final += "       sb $s" + num + ", -" + tipos.get(j).getOffset() + "($sp)\n";
                                    } else {
                                        codigo_final += "       sw $s" + num + ", -" + tipos.get(j).getOffset() + "($sp)\n";
                                    }
                                    Tcontrol ese = new Tcontrol("s" + num, "1", tipos.get(j).getId());
                                    eses.add(ese);
                                    num++;
                                }
                                lastoffset = tipos.get(j).getOffset();
                            }
                        }
                        codigo_final += "       move $fp, $sp\n";
                        codigo_final += "       sub $sp, $sp, " + lastoffset + "\n";
                        for (int j = 0; j < param2; j++) {
                            codigo_final += "       move $s" + j + ", $a" + j + "\n";
                        }
                    }
                } else if (cuadruplos.get(i).getOp().matches("[+|\\-|*|/]")) {
                    String t1 = "", t2 = "", t3 = "";
                    if (cuadruplos.get(i).getArg1().startsWith("$t") && cuadruplos.get(i).getArg2().startsWith("$t")) {
                        for (int j = 0; j < 10; j++) {
                            if (tcontrol.get(j).getLlamado().equals(cuadruplos.get(i).getArg1())) {
                                t1 = "t" + j;
                            }
                            if (tcontrol.get(j).getLlamado().equals(cuadruplos.get(i).getArg2())) {
                                t2 = "t" + j;
                            }
                        }
                    } else if (cuadruplos.get(i).getArg1().startsWith("$t")) {
                        for (int j = 0; j < 10; j++) {
                            if (tcontrol.get(j).getLlamado().equals(cuadruplos.get(i).getArg1())) {
                                t1 = "t" + j;
                            }
                        }
                        t2 = getTempDisp();
                        if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                            codigo_final += "       li $" + t2 + ", " + cuadruplos.get(i).getArg2() + "\n";
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                codigo_final += "       lw $" + t2 + ", _" + cuadruplos.get(i).getArg2() + "\n";
                            } else if (ambito.equals("local")) {
                                codigo_final += "       lw $" + t2 + ", -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $" + t2 + ", $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                            }
                        }
                    } else if (cuadruplos.get(i).getArg2().startsWith("$t")) {
                        for (int j = 0; j < 10; j++) {
                            if (tcontrol.get(j).getLlamado().equals(cuadruplos.get(i).getArg2())) {
                                t2 = "t" + j;
                            }
                        }
                        t1 = getTempDisp();
                        if (cuadruplos.get(i).getArg1().matches("[0-9]+")) {
                            codigo_final += "       li $" + t1 + ", " + cuadruplos.get(i).getArg1() + "\n";
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                codigo_final += "       lw $" + t1 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                            } else if (ambito.equals("local")) {
                                codigo_final += "       lw $" + t1 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $" + t1 + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                            }
                        }
                    } else {
                        t1 = getTempDisp();
                        t2 = getTempDisp();
                        if (cuadruplos.get(i).getArg1().matches("[0-9]+")) {
                            codigo_final += "       li $" + t1 + ", " + cuadruplos.get(i).getArg1() + "\n";
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                codigo_final += "       lw $" + t1 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                            } else if (ambito.equals("local")) {
                                codigo_final += "       lw $" + t1 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $" + t1 + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                            }
                        }
                        if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                            codigo_final += "       li $" + t2 + ", " + cuadruplos.get(i).getArg2() + "\n";
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                codigo_final += "       lw $" + t2 + ", _" + cuadruplos.get(i).getArg2() + "\n";
                            } else if (ambito.equals("local")) {
                                codigo_final += "       lw $" + t2 + ", -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $" + t2 + ", $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                            }
                        }
                    }
                    t3 = getTempDisp();
                    if (cuadruplos.get(i).getOp().equals("+")) {
                        codigo_final += "       add $" + t3 + ", $" + t1 + ", $" + t2 + "\n";
                    } else if (cuadruplos.get(i).getOp().equals("-")) {
                        codigo_final += "       sub $" + t3 + ", $" + t1 + ", $" + t2 + "\n";
                    } else if (cuadruplos.get(i).getOp().equals("*")) {
                        codigo_final += "       mul $" + t3 + ", $" + t1 + ", $" + t2 + "\n";
                    } else if (cuadruplos.get(i).getOp().equals("/")) {
                        codigo_final += "       div $" + t3 + ", $" + t1 + ", $" + t2 + "\n";
                    }
                    setTemp(t3, "0", cuadruplos.get(i).getRes());
                    setTemp(t1, "1", "");
                    setTemp(t2, "1", "");
                } else if (cuadruplos.get(i).getOp().equals("=")) {
                    if (cuadruplos.get(i).getArg1().equals("RET")) {
                        String t3 = getTempDisp();
                        codigo_final += "       move $" + t3 + ", $v0\n";
                        setTemp(t3, "0", cuadruplos.get(i).getRes());
                    } else {
                        String t3 = getActive(cuadruplos.get(i).getArg1());
                        if (!cuadruplos.get(i).getArg1().startsWith("$t")) {
                            if (cuadruplos.get(i).getArg1().matches("[0-9]+") | cuadruplos.get(i).getArg1().startsWith("'")) {
                                codigo_final += "       li $" + t3 + ", " + cuadruplos.get(i).getArg1() + "\n";
                            } else {
                                String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                                if (ambito.equals("$global")) {
                                    codigo_final += "       lw $" + t3 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                                } else if (ambito.equals("local")) {
                                    codigo_final += "       lw $" + t3 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                } else if (ambito.equals("parametro")) {
                                    codigo_final += "       move $" + t3 + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                                }
                            }
                        }
                        String ambito = getAmbito(cuadruplos.get(i).getRes(), nombre_ambito);
                        if (ambito.equals("$global")) {
                            if (getTipo(cuadruplos.get(i).getRes()).equals("char")) {
                                codigo_final += "       sb $" + t3 + ", _" + cuadruplos.get(i).getRes() + "\n";
                            } else {
                                codigo_final += "       sw $" + t3 + ", _" + cuadruplos.get(i).getRes() + "\n";
                            }
                        } else if (ambito.equals("local")) {
                            if (getTipo(cuadruplos.get(i).getRes()).equals("char")) {
                                codigo_final += "       sb $" + t3 + ", -" + getOffset(cuadruplos.get(i).getRes(), nombre_ambito) + "($fp)\n";
                            } else {
                                codigo_final += "       sw $" + t3 + ", -" + getOffset(cuadruplos.get(i).getRes(), nombre_ambito) + "($fp)\n";
                            }
                        } else if (ambito.equals("parametro")) {
                            codigo_final += "       move $" + t3 + ", $" + getEse(cuadruplos.get(i).getRes()) + "\n";
                        }
                        setTemp(t3, "1", "");
                    }
                } else if (cuadruplos.get(i).getOp().equals("SCANF")) {
                    String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                    if (cuadruplos.get(i).getArg1().equals("%c")) {
                        codigo_final += "       li $v0, 12\n";
                    } else {
                        codigo_final += "       li $v0, 5\n";
                    }
                    codigo_final += "       syscall\n";
                    if (ambito.equals("$global")) {
                        if (cuadruplos.get(i).getArg1().equals("%c")) {
                            codigo_final += "       sb $v0, _" + cuadruplos.get(i).getArg2() + "\n";
                        } else {
                            codigo_final += "       sw $v0, _" + cuadruplos.get(i).getArg2() + "\n";
                        }
                    } else if (ambito.equals("local")) {
                        if (cuadruplos.get(i).getArg1().equals("%c")) {
                            codigo_final += "       sb $v0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                        } else {
                            codigo_final += "       sw $v0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                        }
                    } else if (ambito.equals("parametro")) {
                        codigo_final += "       move $" + getEse(cuadruplos.get(i).getArg2()) + ", $v0\n";
                    }
                } else if (cuadruplos.get(i).getOp().equals("PRINTF")) {
                    boolean solo = false;
                    String msj1 = "", msj2 = "";
                    if (cuadruplos.get(i).getArg1().contains("%d") | cuadruplos.get(i).getArg1().contains("%c")) {
                        int indice = cuadruplos.get(i).getArg1().indexOf("%");
                        msj1 = cuadruplos.get(i).getArg1().substring(0, indice);
                        msj2 = cuadruplos.get(i).getArg1().substring(indice + 2);
                    } else {
                        msj1 = cuadruplos.get(i).getArg1();
                        solo = true;
                    }
                    int indice1 = 0, indice2 = 0;
                    for (int j = 0; j < tup_msg.size(); j++) {
                        if (tup_msg.get(j).equals(msj1)) {
                            indice1 = j + 1;
                        }
                        if (tup_msg.get(j).equals(msj2)) {
                            indice2 = j + 1;
                        }
                    }
                    if (!solo) {
                        if (!msj1.equals("") && !msj2.equals("")) {
                            codigo_final += "       li $v0, 4\n";
                            codigo_final += "       la $a0, _msg" + indice1 + "\n";
                            codigo_final += "       syscall\n";
                            if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                                codigo_final += "       li $v0, 1\n";
                                codigo_final += "       li $a0, " + cuadruplos.get(i).getArg2() + "\n";
                            } else {
                                String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                                if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                    codigo_final += "       li $v0, 11\n";
                                } else {
                                    codigo_final += "       li $v0, 1\n";
                                }
                                if (ambito.equals("$global")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    } else {
                                        codigo_final += "       lw $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    }
                                } else if (ambito.equals("local")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    } else {
                                        codigo_final += "       lw $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    }
                                } else if (ambito.equals("parametro")) {
                                    codigo_final += "       move $a0, $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                                }
                            }
                            codigo_final += "       syscall\n";
                            codigo_final += "       li $v0, 4\n";
                            codigo_final += "       la $a0, _msg" + indice2 + "\n";
                            codigo_final += "       syscall\n";
                        } else if (!msj1.equals("")) {
                            codigo_final += "       li $v0, 4\n";
                            codigo_final += "       la $a0, _msg" + indice1 + "\n";
                            codigo_final += "       syscall\n";
                            if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                                codigo_final += "       li $v0, 1\n";
                                codigo_final += "       li $a0, " + cuadruplos.get(i).getArg2() + "\n";
                            } else {
                                String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                                if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                    codigo_final += "       li $v0, 11\n";
                                } else {
                                    codigo_final += "       li $v0, 1\n";
                                }
                                if (ambito.equals("$global")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    } else {
                                        codigo_final += "       lw $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    }
                                } else if (ambito.equals("local")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    } else {
                                        codigo_final += "       lw $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    }
                                } else if (ambito.equals("parametro")) {
                                    codigo_final += "       move $a0, $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                                }
                            }
                            codigo_final += "       syscall\n";
                        } else if (!msj2.equals("")) {
                            if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                                codigo_final += "       li $v0, 1\n";
                                codigo_final += "       li $a0, " + cuadruplos.get(i).getArg2() + "\n";
                            } else {
                                String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                                if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                    codigo_final += "       li $v0, 11\n";
                                } else {
                                    codigo_final += "       li $v0, 1\n";
                                }
                                if (ambito.equals("$global")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    } else {
                                        codigo_final += "       lw $a0, _" + cuadruplos.get(i).getArg2() + "\n";
                                    }
                                } else if (ambito.equals("local")) {
                                    if (getTipo(cuadruplos.get(i).getArg2()).equals("char")) {
                                        codigo_final += "       lb $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    } else {
                                        codigo_final += "       lw $a0, -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                                    }
                                } else if (ambito.equals("parametro")) {
                                    codigo_final += "       move $a0, $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                                }
                            }
                            codigo_final += "       syscall\n";
                            codigo_final += "       li $v0, 4\n";
                            codigo_final += "       la $a0, _msg" + indice2 + "\n";
                            codigo_final += "       syscall\n";
                        }
                    } else {
                        codigo_final += "       li $v0, 4\n";
                        codigo_final += "       la $a0, _msg" + indice1 + "\n";
                        codigo_final += "       syscall\n";
                    }
                } else if (cuadruplos.get(i).getOp().contains("IF")) {
                    String oper = cuadruplos.get(i).getOp().substring(cuadruplos.get(i).getOp().indexOf("F") + 1);
                    String arg = "";
                    if (oper.equals("<")) {
                        arg = "blt";
                    } else if (oper.equals(">")) {
                        arg = "bgt";
                    } else if (oper.equals("<=")) {
                        arg = "ble";
                    } else if (oper.equals(">=")) {
                        arg = "bge";
                    } else if (oper.equals("==")) {
                        arg = "beq";
                    } else if (oper.equals("!=")) {
                        arg = "bne";
                    }
                    String t1 = getTempDisp();
                    String t2 = getTempDisp();
                    if (cuadruplos.get(i).getArg1().matches("[0-9]+")) {
                        codigo_final += "       li $" + t1 + ", " + cuadruplos.get(i).getArg1() + "\n";
                    } else {
                        String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                        if (ambito.equals("$global")) {
                            codigo_final += "       lw $" + t1 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                        } else if (ambito.equals("local")) {
                            codigo_final += "       lw $" + t1 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                        } else if (ambito.equals("parametro")) {
                            codigo_final += "       move $" + t1 + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                        }
                    }
                    if (cuadruplos.get(i).getArg2().matches("[0-9]+")) {
                        codigo_final += "       li $" + t2 + ", " + cuadruplos.get(i).getArg2() + "\n";
                    } else {
                        String ambito = getAmbito(cuadruplos.get(i).getArg2(), nombre_ambito);
                        if (ambito.equals("$global")) {
                            codigo_final += "       lw $" + t2 + ", _" + cuadruplos.get(i).getArg2() + "\n";
                        } else if (ambito.equals("local")) {
                            codigo_final += "       lw $" + t2 + ", -" + getOffset(cuadruplos.get(i).getArg2(), nombre_ambito) + "($fp)\n";
                        } else if (ambito.equals("parametro")) {
                            codigo_final += "       move $" + t2 + ", $" + getEse(cuadruplos.get(i).getArg2()) + "\n";
                        }
                    }
                    codigo_final += "       " + arg + " $" + t1 + ", $" + t2 + ", _" + cuadruplos.get(i).getRes() + "\n";
                    setTemp(t1, "1", "");
                    setTemp(t2, "1", "");
                } else if (cuadruplos.get(i).getOp().equals("GOTO")) {
                    codigo_final += "       b _" + cuadruplos.get(i).getArg1() + "\n";
                } else if (cuadruplos.get(i).getOp().equals("ETIQ")) {
                    codigo_final += "_" + cuadruplos.get(i).getArg1() + ":\n";
                } else if (cuadruplos.get(i).getOp().equals("RETURN")) {
                    if (!nombre_ambito.equals("main")) {
                        if (cuadruplos.get(i).getArg1().matches("[0-9]+") | cuadruplos.get(i).getArg1().startsWith("'")) {
                            codigo_final += "       li $v0, " + cuadruplos.get(i).getArg1() + "\n";
                        } else if (cuadruplos.get(i).getArg1().startsWith("$")) {
                            codigo_final += "       move $v0, $" + getActive(cuadruplos.get(i).getArg1()) + "\n";
                            setTemp(getActive(cuadruplos.get(i).getArg1()), "1", "");
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    codigo_final += "       lb $v0, _" + cuadruplos.get(i).getArg1() + "\n";
                                } else {
                                    codigo_final += "       lw $v0, _" + cuadruplos.get(i).getArg1() + "\n";
                                }
                            } else if (ambito.equals("local")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    codigo_final += "       lb $v0, -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                } else {
                                    codigo_final += "       lw $v0, -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                }
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $v0, $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                            }
                        }
                        codigo_final += "       b _end" + nombre_ambito + "\n";
                    }
                } else if (cuadruplos.get(i).getOp().equals("PARAM")) {
                    if (num_a < 4) {
                        if (cuadruplos.get(i).getArg1().matches("[0-9]+") | cuadruplos.get(i).getArg1().startsWith("'")) {
                            codigo_final += "       li $a" + num_a + ", " + cuadruplos.get(i).getArg1() + "\n";
                        } else if (cuadruplos.get(i).getArg1().startsWith("$")) {
                            codigo_final += "       move $a" + num_a + ", $" + getActive(cuadruplos.get(i).getArg1()) + "\n";
                            setTemp(getActive(cuadruplos.get(i).getArg1()), "1", "");
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    codigo_final += "       lb $a" + num_a + ", _" + cuadruplos.get(i).getArg1() + "\n";
                                } else {
                                    codigo_final += "       lw $a" + num_a + ", _" + cuadruplos.get(i).getArg1() + "\n";
                                }
                            } else if (ambito.equals("local")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    codigo_final += "       lb $a" + num_a + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                } else {
                                    codigo_final += "       lw $a" + num_a + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                }
                            } else if (ambito.equals("parametro")) {
                                codigo_final += "       move $a" + num_a + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                            }
                        }
                        num_a++;
                    } else {
                        String t1 = getTempDisp();
                        if (cuadruplos.get(i).getArg1().startsWith("'")) {
                            num_a2 += 1;
                            codigo_final += "       li $" + t1 + ", " + cuadruplos.get(i).getArg1() + "\n";
                            codigo_final += "       sb $" + t1 + ", -" + num_a2 + "($sp)\n";
                        } else if (cuadruplos.get(i).getArg1().matches("[0-9]+")) {
                            num_a2 += 4;
                            codigo_final += "       li $" + t1 + ", " + cuadruplos.get(i).getArg1() + "\n";
                            codigo_final += "       sw $" + t1 + ", -" + num_a2 + "($sp)\n";
                        } else {
                            String ambito = getAmbito(cuadruplos.get(i).getArg1(), nombre_ambito);
                            if (ambito.equals("$global")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    num_a2 += 1;
                                    codigo_final += "       lb $" + t1 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                                    codigo_final += "       sb $" + t1 + ", -" + num_a2 + "($sp)\n";
                                } else {
                                    num_a2 += 4;
                                    codigo_final += "       lw $" + t1 + ", _" + cuadruplos.get(i).getArg1() + "\n";
                                    codigo_final += "       sw $" + t1 + ", -" + num_a2 + "($sp)\n";
                                }
                            } else if (ambito.equals("local")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    num_a2 += 1;
                                    codigo_final += "       lb $" + t1 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                    codigo_final += "       sb $" + t1 + ", -" + num_a2 + "($sp)\n";
                                } else {
                                    num_a2 += 4;
                                    codigo_final += "       lw $" + t1 + ", -" + getOffset(cuadruplos.get(i).getArg1(), nombre_ambito) + "($fp)\n";
                                    codigo_final += "       sw $" + t1 + ", -" + num_a2 + "($sp)\n";
                                }
                            } else if (ambito.equals("parametro")) {
                                if (getTipo(cuadruplos.get(i).getArg1()).equals("char")) {
                                    num_a2 += 1;
                                } else {
                                    num_a2 += 4;
                                }
                                codigo_final += "       move $" + t1 + ", $" + getEse(cuadruplos.get(i).getArg1()) + "\n";
                                codigo_final += "       sw $" + t1 + ", -" + num_a2 + "($sp)\n";
                            }
                        }
                        setTemp(t1, "1", "");
                    }
                } else if (cuadruplos.get(i).getOp().equals("CALL")) {
                    int acum = 0;
                    for (int j = 0; j < tcontrol.size(); j++) {
                        if (tcontrol.get(j).getActivo().equals("0")) {
                            acum += 4;
                            codigo_final += "       sw $t" + j + ", -" + acum + "($sp)\n";
                        }
                    }
                    if (acum > 0) {
                        codigo_final += "       sub $sp, $sp, " + acum + "\n";
                    }
                    codigo_final += "       jal _" + cuadruplos.get(i).getArg1() + "\n";
                    num_a = 0;
                    num_a = 0;
                    while (acum > 0) {
                        codigo_final += "       lw $t" + (acum / 4 - 1) + ", 0($sp)\n";
                        codigo_final += "       add $sp, $sp, 4\n";
                        acum -= 4;
                    }
                } else if (cuadruplos.get(i).getOp().equals("END")) {
                    codigo_final += "_end" + nombre_ambito + ":\n";
                    codigo_final += "       move $sp, $fp\n";
                    codigo_final += "       lw $fp, -4($sp)\n";
                    codigo_final += "       lw $ra, -8($sp)\n";
                    int param = getParam(nombre_ambito).size();
                    int num = 0;
                    for (int j = 0; j < tipos.size(); j++) {
                        if (tipos.get(j).getFuncion().equals(nombre_ambito)) {
                            if (num < param) {
                                if (tipos.get(j).getTipo().equals("char")) {
                                    codigo_final += "       lb $s" + num + ", -" + tipos.get(j).getOffset() + "($sp)\n";
                                } else {
                                    codigo_final += "       lw $s" + num + ", -" + tipos.get(j).getOffset() + "($sp)\n";
                                }
                                num++;
                            }
                        }
                    }
                    codigo_final += "       jr $ra\n";
                }
            }
            codigo_final += "       li $v0, 10\n" + "       syscall";
             FileWriter fichero = null;
            PrintWriter pw = null;
            try {
                fichero = new FileWriter("src/Compilador/mips.asm");
                pw = new PrintWriter(fichero);

                pw.println(codigo_final);

            } catch (IOException e) {
            } finally {
                try {
                    // Nuevamente aprovechamos el finally para 
                    // asegurarnos que se cierra el fichero.
                    if (null != fichero) {
                        fichero.close();
                    }
                } catch (IOException e2) {
                }
            }
            JT_codigofinal.append(codigo_final);
        }

        // Esa onda! Vallejo estar√≠a orgulloso. :D
        if (JT_errores.getText().trim().equals("")) {
            JT_errores.append("Programa compilado exitosamente.\n");
        }
    }


    public String getEse(String id) {
        String ese = "t0";
        for (int j = 0; j < eses.size(); j++) {
            if (eses.get(j).getLlamado().equals(id)) {
                ese = eses.get(j).getTemporal();
                break;
            }
        }
        return ese;
    }

    public String getActive(String id) {
        String last = "t0";
        for (int j = 0; j < tcontrol.size(); j++) {
            if (tcontrol.get(j).getActivo().equals("0") && tcontrol.get(j).getLlamado().equals(id)) {
                last = tcontrol.get(j).getTemporal();
                break;
            }
        }
        return last;
    }

    public ArrayList<Parametro> getParam(String id) {
        ArrayList<Parametro> params = new ArrayList();
        for (int i = 0; i < funciones.size(); i++) {
            if (funciones.get(i).getId().equals(id)) {
                params = funciones.get(i).getParametros();
                break;
            }
        }
        return params;
    }

    public String getTipo(String id) {
        String tipo = "";
        for (int i = 0; i < tipos.size(); i++) {
            if (tipos.get(i).getId().equals(id)) {
                tipo = tipos.get(i).getTipo();
                break;
            }
        }
        return tipo;
    }

    public int getOffset(String id, String funcion) {
        int offset = 0;
        for (int i = 0; i < tipos.size(); i++) {
            if (tipos.get(i).getId().equals(id) && tipos.get(i).getFuncion().equals(funcion)) {
                offset = tipos.get(i).getOffset();
                break;
            }
        }
        return offset;
    }

    public String getAmbito(String id, String funcion) {
        String ambito = "local";
        for (int i = 0; i < tipos.size(); i++) {
            if (id.equals(tipos.get(i).getId())) {
                if (tipos.get(i).getFuncion().equals("$global")) {
                    ambito = "$global";
                } else {
                    if (tipos.get(i).getFuncion().equals(funcion)) {
                        for (int j = 0; j < funciones.size(); j++) {
                            if (tipos.get(i).getFuncion().equals(funciones.get(j).getId())) {
                                for (int k = 0; k < funciones.get(j).getParametros().size(); k++) {
                                    if (id.equals(funciones.get(j).getParametros().get(k).getId())) {
                                        ambito = "parametro";
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }
        return ambito;
    }

    public boolean getMsjDisp(String msj) {
        boolean repetido = false;
        for (int i = 0; i < tup_msg.size(); i++) {
            if (tup_msg.get(i).equals(msj)) {
                repetido = true;
            }
        }
        return repetido;
    }

    public String getTempDisp() {
        String tdisp = "";
        for (int i = 0; i < tcontrol.size(); i++) {
            if (tcontrol.get(i).getActivo().equals("1")) {
                tdisp = tcontrol.get(i).getTemporal();
                tcontrol.get(i).setActivo("0");
                break;
            }
        }
        return tdisp;
    }

    public void setTemp(String temp, String active, String call) {
        for (int i = 0; i < tcontrol.size(); i++) {
            if (temp.equals(tcontrol.get(i).getTemporal())) {
                tcontrol.get(i).setActivo(active);
                tcontrol.get(i).setLlamado(call);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_abrirenlace;
    private javax.swing.JButton JB_ejecutar;
    private javax.swing.JButton JB_guardar;
    private javax.swing.JButton JT_cargar;
    private javax.swing.JTextArea JT_codigofinal;
    private javax.swing.JTable JT_cuadruplos;
    private javax.swing.JTextArea JT_errores;
    private javax.swing.JTable JT_funciones;
    private javax.swing.JTextArea JT_prueba;
    private javax.swing.JTextArea JT_salida;
    private javax.swing.JTable JT_tipos;
    private javax.swing.JLabel L_Archivo;
    private javax.swing.JLabel L_arch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
