
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\004\003\000\002\003" +
    "\004\000\002\003\002\000\002\002\012\000\002\002\010" +
    "\000\002\002\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\004\000\002\017\004\000\002\020\003\000\002" +
    "\020\002\000\002\050\003\000\002\026\003\000\002\033" +
    "\005\000\002\033\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\007\000\002\030\005\000\002" +
    "\030\006\000\002\030\005\000\002\030\006\000\002\030" +
    "\005\000\002\030\006\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\004\000\002\031\005\000" +
    "\002\031\004\000\002\031\004\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\002\000\002\034" +
    "\005\000\002\035\005\000\002\035\002\000\002\036\004" +
    "\000\002\037\004\000\002\037\002\000\002\041\004\000" +
    "\002\040\003\000\002\040\002\000\002\042\005\000\002" +
    "\042\002\000\002\043\004\000\002\043\002\000\002\044" +
    "\005\000\002\044\002\000\002\005\004\000\002\005\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\004\000\002\006" +
    "\002\000\002\007\012\000\002\010\006\000\002\010\002" +
    "\000\002\011\015\000\002\012\003\000\002\012\003\000" +
    "\002\013\011\000\002\021\011\000\002\022\005\000\002" +
    "\022\004\000\002\022\004\000\002\022\002\000\002\051" +
    "\003\000\002\023\012\000\002\024\004\000\002\025\003" +
    "\000\002\025\002\000\002\015\007\000\002\014\005\000" +
    "\002\045\003\000\002\046\005\000\002\047\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\012\002\ufffe\012\004\013\015\040\006\001" +
    "\002\000\012\004\ufff5\014\016\017\ufff5\021\ufff5\001\002" +
    "\000\004\004\023\001\002\000\010\004\ufffa\017\ufffa\021" +
    "\ufffa\001\002\000\012\002\ufffe\012\004\013\015\040\006" +
    "\001\002\000\012\002\ufffb\012\ufffb\013\ufffb\040\ufffb\001" +
    "\002\000\004\002\021\001\002\000\010\004\ufff9\017\ufff9" +
    "\021\ufff9\001\002\000\004\015\020\001\002\000\004\002" +
    "\000\001\002\000\012\004\ufff5\014\016\017\ufff5\021\ufff5" +
    "\001\002\000\010\004\ufff6\017\ufff6\021\ufff6\001\002\000" +
    "\010\004\ufff7\017\ufff7\021\ufff7\001\002\000\034\002\uffa8" +
    "\003\uffa8\004\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\023\uffa8\036\uffa8\037\uffa8\040\uffa8\047\uffa8\001\002" +
    "\000\004\002\001\001\002\000\004\002\uffff\001\002\000" +
    "\050\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\042\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\010\015\uffd6\017\025\020\026\001\002\000" +
    "\006\004\ufff5\014\016\001\002\000\012\012\004\013\015" +
    "\021\uffd3\040\006\001\002\000\004\015\uffd8\001\002\000" +
    "\006\017\264\021\uffce\001\002\000\010\004\023\017\uffd0" +
    "\021\uffd0\001\002\000\004\021\033\001\002\000\006\015" +
    "\034\022\035\001\002\000\012\002\ufffc\012\ufffc\013\ufffc" +
    "\040\ufffc\001\002\000\032\003\056\004\023\006\044\010" +
    "\036\011\061\012\004\013\015\023\uffbe\036\045\037\037" +
    "\040\006\047\041\001\002\000\004\020\254\001\002\000" +
    "\004\020\242\001\002\000\004\015\240\001\002\000\016" +
    "\004\023\005\073\014\070\020\076\041\100\046\101\001" +
    "\002\000\006\015\uffaa\021\uffaa\001\002\000\004\004\023" +
    "\001\002\000\004\020\222\001\002\000\004\020\206\001" +
    "\002\000\032\003\056\004\023\006\044\010\036\011\061" +
    "\012\004\013\015\023\uffbe\036\045\037\037\040\006\047" +
    "\041\001\002\000\024\003\056\004\023\006\044\010\036" +
    "\011\061\023\uffbe\036\045\037\037\047\041\001\002\000" +
    "\004\023\203\001\002\000\004\023\uffc8\001\002\000\024" +
    "\003\056\004\023\006\044\010\036\011\061\023\uffbe\036" +
    "\045\037\037\047\041\001\002\000\024\003\056\004\023" +
    "\006\044\010\036\011\061\023\uffbe\036\045\037\037\047" +
    "\041\001\002\000\006\020\175\026\067\001\002\000\024" +
    "\003\056\004\023\006\044\010\036\011\061\023\uffbe\036" +
    "\045\037\037\047\041\001\002\000\032\003\056\004\023" +
    "\006\044\010\036\011\061\012\004\013\015\023\uffbe\036" +
    "\045\037\037\040\006\047\041\001\002\000\024\003\056" +
    "\004\023\006\044\010\036\011\061\023\uffbe\036\045\037" +
    "\037\047\041\001\002\000\004\023\uffc0\001\002\000\004" +
    "\020\064\001\002\000\024\003\056\004\023\006\044\010" +
    "\036\011\061\023\uffbe\036\045\037\037\047\041\001\002" +
    "\000\004\023\uffc3\001\002\000\004\004\023\001\002\000" +
    "\004\015\157\001\002\000\004\026\067\001\002\000\016" +
    "\004\023\005\073\014\070\020\076\041\100\046\101\001" +
    "\002\000\004\004\023\001\002\000\046\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\144\021\uffd9\024\uffd9\025\uffd9\027" +
    "\uffd9\030\uffd9\031\143\032\uffd9\033\142\034\uffd9\035\uffd9" +
    "\042\uffd9\044\uffd9\045\uffd9\001\002\000\040\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\021\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\030\uffe3\032\uffe3\034\uffe3\035\uffe3\042\uffe3\044\uffe3\045" +
    "\uffe3\001\002\000\040\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\021\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\032\uffe2\034" +
    "\uffe2\035\uffe2\042\uffe2\044\uffe2\045\uffe2\001\002\000\010" +
    "\015\uffa9\021\uffa9\044\137\001\002\000\036\014\107\015" +
    "\uffed\017\uffed\021\uffed\024\115\025\114\027\110\030\uffed" +
    "\032\uffed\034\113\035\111\042\112\044\uffed\045\uffed\001" +
    "\002\000\016\004\023\005\073\014\070\020\076\041\100" +
    "\046\101\001\002\000\020\015\ufff1\017\ufff1\021\ufff1\030" +
    "\103\032\104\044\ufff1\045\105\001\002\000\004\004\023" +
    "\001\002\000\040\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021" +
    "\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\032\uffe1\034\uffe1" +
    "\035\uffe1\042\uffe1\044\uffe1\045\uffe1\001\002\000\040\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd\042\uffdd\044" +
    "\uffdd\045\uffdd\001\002\000\016\004\023\005\073\014\070" +
    "\020\076\041\100\046\101\001\002\000\016\004\023\005" +
    "\073\014\070\020\076\041\100\046\101\001\002\000\016" +
    "\004\023\005\073\014\070\020\076\041\100\046\101\001" +
    "\002\000\036\014\107\015\uffee\017\uffee\021\uffee\024\115" +
    "\025\114\027\110\030\uffee\032\uffee\034\113\035\111\042" +
    "\112\044\uffee\045\uffee\001\002\000\016\004\023\005\073" +
    "\014\070\020\076\041\100\046\101\001\002\000\016\004" +
    "\023\005\073\014\070\020\076\041\100\046\101\001\002" +
    "\000\004\026\130\001\002\000\016\004\023\005\073\014" +
    "\070\020\076\041\100\046\101\001\002\000\016\004\023" +
    "\005\073\014\070\020\076\041\100\046\101\001\002\000" +
    "\020\004\023\005\073\014\070\020\076\026\122\041\100" +
    "\046\101\001\002\000\020\004\023\005\073\014\070\020" +
    "\076\026\117\041\100\046\101\001\002\000\040\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\021\uffe5\024\uffe5\025\uffe5\027" +
    "\uffe5\030\uffe5\032\uffe5\034\uffe5\035\uffe5\042\uffe5\044\uffe5" +
    "\045\uffe5\001\002\000\016\004\023\005\073\014\070\020" +
    "\076\041\100\046\101\001\002\000\040\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\021\uffe4\024\uffe4\025\uffe4\027\uffe4\030" +
    "\uffe4\032\uffe4\034\uffe4\035\uffe4\042\uffe4\044\uffe4\045\uffe4" +
    "\001\002\000\040\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021" +
    "\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\032\uffe7\034\uffe7" +
    "\035\uffe7\042\uffe7\044\uffe7\045\uffe7\001\002\000\016\004" +
    "\023\005\073\014\070\020\076\041\100\046\101\001\002" +
    "\000\040\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\032\uffe6\034\uffe6\035\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\001\002\000\040\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\024\uffeb\025\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\034\uffeb\035\uffeb\042\uffeb\044\uffeb\045" +
    "\uffeb\001\002\000\022\014\107\016\126\024\115\025\114" +
    "\027\110\034\113\035\111\042\112\001\002\000\016\004" +
    "\023\005\073\014\070\020\076\041\100\046\101\001\002" +
    "\000\040\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\024" +
    "\uffea\025\uffea\027\uffea\030\uffea\032\uffea\034\uffea\035\uffea" +
    "\042\uffea\044\uffea\045\uffea\001\002\000\016\004\023\005" +
    "\073\014\070\020\076\041\100\046\101\001\002\000\040" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\024\uffe8\025" +
    "\uffe8\027\uffe8\030\uffe8\032\uffe8\034\uffe8\035\uffe8\042\uffe8" +
    "\044\uffe8\045\uffe8\001\002\000\040\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\021\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\042\uffe9\044\uffe9\045\uffe9\001" +
    "\002\000\040\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\024\uffec\025\uffec\027\uffec\030\uffec\032\uffec\034\uffec\035" +
    "\uffec\042\uffec\044\uffec\045\uffec\001\002\000\036\014\107" +
    "\015\uffef\017\uffef\021\uffef\024\115\025\114\027\110\030" +
    "\uffef\032\uffef\034\113\035\111\042\112\044\uffef\045\uffef" +
    "\001\002\000\036\014\107\015\ufff0\017\ufff0\021\ufff0\024" +
    "\115\025\114\027\110\030\ufff0\032\ufff0\034\113\035\111" +
    "\042\112\044\ufff0\045\ufff0\001\002\000\006\021\140\044" +
    "\137\001\002\000\016\004\023\005\073\014\070\020\076" +
    "\041\100\046\101\001\002\000\040\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\042\uffdf\044\uffdf\045\uffdf\001" +
    "\002\000\020\015\ufff2\017\ufff2\021\ufff2\030\103\032\104" +
    "\044\ufff2\045\105\001\002\000\040\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\021\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\042\uffdb\044\uffdb\045\uffdb\001" +
    "\002\000\040\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\024\uffdc\025\uffdc\027\uffdc\030\uffdc\032\uffdc\034\uffdc\035" +
    "\uffdc\042\uffdc\044\uffdc\045\uffdc\001\002\000\020\004\023" +
    "\005\073\014\070\020\076\021\uffcc\041\100\046\101\001" +
    "\002\000\040\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\034\uffe0\035" +
    "\uffe0\042\uffe0\044\uffe0\045\uffe0\001\002\000\012\015\ufff3" +
    "\017\ufff3\021\ufff3\044\137\001\002\000\004\021\155\001" +
    "\002\000\006\017\151\021\uffca\001\002\000\016\004\023" +
    "\005\073\014\070\020\076\041\100\046\101\001\002\000" +
    "\004\021\uffcd\001\002\000\006\017\151\021\uffca\001\002" +
    "\000\004\021\uffcb\001\002\000\040\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\021\uffda\024\uffda\025\uffda\027\uffda\030\uffda" +
    "\032\uffda\034\uffda\035\uffda\042\uffda\044\uffda\045\uffda\001" +
    "\002\000\040\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde" +
    "\024\uffde\025\uffde\027\uffde\030\uffde\032\uffde\034\uffde\035" +
    "\uffde\042\uffde\044\uffde\045\uffde\001\002\000\016\004\023" +
    "\005\073\014\070\020\076\041\100\046\101\001\002\000" +
    "\004\015\161\001\002\000\016\004\023\005\073\014\070" +
    "\020\076\041\100\046\101\001\002\000\042\014\uffd9\020" +
    "\144\021\uffd9\024\uffd9\025\uffd9\026\067\027\uffd9\030\uffd9" +
    "\031\143\032\uffd9\033\142\034\uffd9\035\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\001\002\000\004\021\uffb9\001\002\000\004" +
    "\021\166\001\002\000\004\021\uffb8\001\002\000\004\022" +
    "\167\001\002\000\024\003\056\004\023\006\044\010\036" +
    "\011\061\023\uffbe\036\045\037\037\047\041\001\002\000" +
    "\004\023\171\001\002\000\024\003\uffba\004\uffba\006\uffba" +
    "\010\uffba\011\uffba\023\uffba\036\uffba\037\uffba\047\uffba\001" +
    "\002\000\004\023\uffc6\001\002\000\004\023\uffbf\001\002" +
    "\000\004\023\uffc2\001\002\000\020\004\023\005\073\014" +
    "\070\020\076\021\uffcc\041\100\046\101\001\002\000\004" +
    "\021\177\001\002\000\004\015\200\001\002\000\024\003" +
    "\uffac\004\uffac\006\uffac\010\uffac\011\uffac\023\uffac\036\uffac" +
    "\037\uffac\047\uffac\001\002\000\004\023\uffc5\001\002\000" +
    "\004\023\uffc7\001\002\000\012\002\ufffd\012\ufffd\013\ufffd" +
    "\040\ufffd\001\002\000\004\023\uffc1\001\002\000\004\023" +
    "\uffc9\001\002\000\004\050\207\001\002\000\004\043\211" +
    "\001\002\000\006\017\212\021\uffb2\001\002\000\006\017" +
    "\uffb1\021\uffb1\001\002\000\012\004\ufff5\005\216\014\016" +
    "\046\220\001\002\000\004\021\214\001\002\000\004\015" +
    "\215\001\002\000\024\003\uffb6\004\uffb6\006\uffb6\010\uffb6" +
    "\011\uffb6\023\uffb6\036\uffb6\037\uffb6\047\uffb6\001\002\000" +
    "\004\021\uffb4\001\002\000\004\004\023\001\002\000\004" +
    "\021\uffb3\001\002\000\004\021\uffb5\001\002\000\016\004" +
    "\023\005\073\014\070\020\076\041\100\046\101\001\002" +
    "\000\004\021\224\001\002\000\004\022\225\001\002\000" +
    "\024\003\056\004\023\006\044\010\036\011\061\023\uffbe" +
    "\036\045\037\037\047\041\001\002\000\004\023\227\001" +
    "\002\000\026\003\uffbb\004\uffbb\006\uffbb\007\230\010\uffbb" +
    "\011\uffbb\023\uffbb\036\uffbb\037\uffbb\047\uffbb\001\002\000" +
    "\004\022\232\001\002\000\024\003\uffbd\004\uffbd\006\uffbd" +
    "\010\uffbd\011\uffbd\023\uffbd\036\uffbd\037\uffbd\047\uffbd\001" +
    "\002\000\024\003\056\004\023\006\044\010\036\011\061" +
    "\023\uffbe\036\045\037\037\047\041\001\002\000\004\023" +
    "\234\001\002\000\024\003\uffbc\004\uffbc\006\uffbc\010\uffbc" +
    "\011\uffbc\023\uffbc\036\uffbc\037\uffbc\047\uffbc\001\002\000" +
    "\006\015\uffd6\017\025\001\002\000\004\015\237\001\002" +
    "\000\004\023\uffab\001\002\000\024\003\056\004\023\006" +
    "\044\010\036\011\061\023\uffbe\036\045\037\037\047\041" +
    "\001\002\000\004\023\uffc4\001\002\000\004\050\243\001" +
    "\002\000\004\043\211\001\002\000\004\017\245\001\002" +
    "\000\006\004\uffad\041\246\001\002\000\004\004\uffae\001" +
    "\002\000\004\004\023\001\002\000\004\021\251\001\002" +
    "\000\004\015\252\001\002\000\024\003\uffb0\004\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\023\uffb0\036\uffb0\037\uffb0\047\uffb0" +
    "\001\002\000\004\021\uffaf\001\002\000\016\004\023\005" +
    "\073\014\070\020\076\041\100\046\101\001\002\000\004" +
    "\021\256\001\002\000\004\022\257\001\002\000\024\003" +
    "\056\004\023\006\044\010\036\011\061\023\uffbe\036\045" +
    "\037\037\047\041\001\002\000\004\023\261\001\002\000" +
    "\024\003\uffb7\004\uffb7\006\uffb7\010\uffb7\011\uffb7\023\uffb7" +
    "\036\uffb7\037\uffb7\047\uffb7\001\002\000\006\017\uffd2\021" +
    "\uffd2\001\002\000\006\017\uffd1\021\uffd1\001\002\000\010" +
    "\012\004\013\015\040\006\001\002\000\004\021\uffd4\001" +
    "\002\000\006\017\264\021\uffce\001\002\000\004\021\uffcf" +
    "\001\002\000\006\015\uffd6\017\025\001\002\000\004\004" +
    "\023\001\002\000\006\015\uffd5\017\uffd5\001\002\000\004" +
    "\015\uffd7\001\002\000\010\004\ufff8\017\ufff8\021\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\020\002\006\003\013\004\010\016\004\017" +
    "\011\034\012\047\007\001\001\000\004\020\273\001\001" +
    "\000\004\050\023\001\001\000\002\001\001\000\016\002" +
    "\006\003\021\016\004\017\011\034\012\047\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\026\001\001\000\006\020\270\036\267\001\001\000" +
    "\012\016\030\017\011\037\031\041\027\001\001\000\002" +
    "\001\001\000\004\042\264\001\001\000\006\040\261\050" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\047\006\050\007\051\011\056\013" +
    "\052\014\057\015\046\016\042\017\011\021\061\023\054" +
    "\034\012\045\037\046\041\047\045\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\235\027\076\030\074\031\071\033\145\050\070\001" +
    "\001\000\002\001\001\000\004\050\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\204\006\050\007" +
    "\051\011\056\013\052\014\057\015\046\016\042\017\011" +
    "\021\061\023\054\034\012\045\037\046\041\047\045\050" +
    "\053\001\001\000\030\006\203\007\051\011\056\013\052" +
    "\014\057\015\046\021\061\023\054\045\037\046\041\050" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\201\007\051\011\056\013\052\014\057\015\046\021" +
    "\061\023\054\045\037\046\041\050\053\001\001\000\030" +
    "\006\200\007\051\011\056\013\052\014\057\015\046\021" +
    "\061\023\054\045\037\046\041\050\053\001\001\000\002" +
    "\001\001\000\030\006\173\007\051\011\056\013\052\014" +
    "\057\015\046\021\061\023\054\045\037\046\041\050\053" +
    "\001\001\000\042\005\172\006\050\007\051\011\056\013" +
    "\052\014\057\015\046\016\042\017\011\021\061\023\054" +
    "\034\012\045\037\046\041\047\045\050\053\001\001\000" +
    "\030\006\171\007\051\011\056\013\052\014\057\015\046" +
    "\021\061\023\054\045\037\046\041\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\062\007\051" +
    "\011\056\013\052\014\057\015\046\021\061\023\054\045" +
    "\037\046\041\050\053\001\001\000\002\001\001\000\010" +
    "\045\064\046\041\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\076\030\074\031\071\033\073" +
    "\050\070\001\001\000\004\050\155\001\001\000\004\032" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\027\076\030\074\031" +
    "\071\033\135\050\070\001\001\000\002\001\001\000\004" +
    "\050\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\134\031\071\050\070\001\001\000\010\030\133" +
    "\031\071\050\070\001\001\000\010\030\105\031\071\050" +
    "\070\001\001\000\002\001\001\000\006\031\132\050\070" +
    "\001\001\000\006\031\131\050\070\001\001\000\002\001" +
    "\001\000\010\030\124\031\071\050\070\001\001\000\006" +
    "\031\123\050\070\001\001\000\006\031\120\050\070\001" +
    "\001\000\006\031\115\050\070\001\001\000\002\001\001" +
    "\000\006\031\117\050\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\122\050\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\126\050\070\001\001\000\002\001\001\000\006\031\130" +
    "\050\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\140\030\074\031\071\050\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\026\147\027\076\030\074\031" +
    "\071\033\145\043\146\050\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\151\001" +
    "\001\000\016\026\152\027\076\030\074\031\071\033\145" +
    "\050\070\001\001\000\002\001\001\000\004\044\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\157\027\076\030\074\031\071\033\145\050" +
    "\070\001\001\000\002\001\001\000\024\012\163\026\164" +
    "\027\076\030\074\031\071\033\145\045\162\046\041\050" +
    "\161\001\001\000\004\032\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\167\007\051\011\056\013\052\014\057\015\046" +
    "\021\061\023\054\045\037\046\041\050\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\026\147\027\076\030" +
    "\074\031\071\033\145\043\175\050\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\207\001" +
    "\001\000\004\022\212\001\001\000\002\001\001\000\004" +
    "\020\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\222\027" +
    "\076\030\074\031\071\033\145\050\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\225\007\051\011" +
    "\056\013\052\014\057\015\046\021\061\023\054\045\037" +
    "\046\041\050\053\001\001\000\002\001\001\000\004\010" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\232\007\051\011\056\013\052\014\057\015\046\021" +
    "\061\023\054\045\037\046\041\050\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\240\007\051" +
    "\011\056\013\052\014\057\015\046\021\061\023\054\045" +
    "\037\046\041\050\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\243\001\001\000\002\001\001\000" +
    "\006\024\247\025\246\001\001\000\002\001\001\000\004" +
    "\050\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\254\027\076" +
    "\030\074\031\071\033\145\050\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\257\007\051\011\056" +
    "\013\052\014\057\015\046\021\061\023\054\045\037\046" +
    "\041\050\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\030\017" +
    "\011\041\265\001\001\000\002\001\001\000\004\042\266" +
    "\001\001\000\002\001\001\000\004\035\272\001\001\000" +
    "\004\050\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    Arbol arbol = new Arbol();
    
    public void syntax_error(Symbol s) { 
       System.out.println("Error Sintáctico en la Línea " + (s.right + 1) +
       " Columna "+ s.left + ". No se esperaba este componente: " + s.value);
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.right) + " Columna " + s.left + ". Componente " + s.value + 
        " no reconocido.");
    } 



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {


    int token = 0;
    int declaraciones = 0;

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= superinicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // superinicio ::= inicios 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                    arbol.CrearArchivo(i);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("superinicio",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicios ::= inicio inicios 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                String ast = "\n\"" + Integer.toString(token) + "_Inicio\" -> " + i;
                ast += i2;
                RESULT = ast;   
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicios ::= 
            {
              String RESULT =null;
		
                token++;
                RESULT = "";
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicios",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= supertipo id PARIZQ E3 PARDER LLAVEIZQ declaracion LLAVEDER 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
              token++;
              String tok = Integer.toString(token);
              String ast = "\""+ tok + "_Funcion Larga\";\n";
              ast += "\n\"" + tok + "_Funcion Larga\" -> " + st;
              ast += "\n\"" + tok + "_Funcion Larga\" -> " + id2;
              if (e3 != "") {
                  ast += "\n\"" + tok + "_Funcion Larga\" -> " + e3;
              } 
              if (d != "") {
                  ast += "\n\"" + tok + "_Funcion Larga\" -> " + d;
              }
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= supertipo id PARIZQ E3 PARDER PUNTOYCOMA 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
              token++;
              String tok = Integer.toString(token);
              String ast = "\""+ tok + "_Funcion Corta\";\n";
              ast += "\n\"" + tok + "_Funcion Corta\" -> " + st;
              ast += "\n\"" + tok + "_Funcion Corta\" -> " + id2;
              if (e3 != "") {
                  ast += "\n\"" + tok + "_Funcion Corta\" -> " + e3;
              }
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= asignacion 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              RESULT = asig;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // supertipo ::= VOID 
            {
              String RESULT =null;
		
                  token++;
                  String tok = Integer.toString(token);
                  token++;
                  String tok1 = Integer.toString(token);
                  String ast = "\""+ tok1 + "_Tipo\";\n";
                  ast += "\n\"" + tok1 + "_Tipo\" -> \"" + tok + "_void\";\n";
                  RESULT = ast;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("supertipo",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // supertipo ::= tipo 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                  RESULT = t;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("supertipo",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INTEGER tipo1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              token++;
              String tok = Integer.toString(token);
              token++;
              String tok1 = Integer.toString(token);
              String ast = "\""+ tok1 + "_Tipo\";\n";
              ast += "\n\"" + tok1 + "_Tipo\" -> \"" + tok + "_int" + t1 + "\";\n";
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= CHAR tipo1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              token++;
              String tok = Integer.toString(token);
              token++;
              String tok1 = Integer.toString(token);
              String ast = "\""+ tok1 + "_Tipo\";\n";
              ast += "\n\"" + tok1 + "_Tipo\" -> \"" + tok + "_char" + t1 + "\";\n";
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo1 ::= ASTERISCO 
            {
              String RESULT =null;
		
              RESULT = "*";
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo1",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo1 ::= 
            {
              String RESULT =null;
		
              RESULT = "";
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo1",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              token++;
              String tok = Integer.toString(token);
              token++;
              String ast = "\""+ Integer.toString(token) + "_ID\";\n";
              ast += "\n\"" + Integer.toString(token) + "_ID\" -> \"" + tok + "_" + i + "\";\n";
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("id",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= I1 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion\";\n";
            ast += "\n\"" + tok + "_Expresion\" -> " + i1;
            RESULT = ast; 
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E1",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I1 ::= I1 AND T1 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion And\";\n";
            ast += "\n\"" + tok + "_Expresion And\" -> " + i1;
            ast += "\n\"" + tok + "_Expresion And\" -> " + t1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("I1",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I1 ::= T1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = t1;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("I1",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // T1 ::= T1 MAS F1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Suma\";\n";
            ast += "\n\"" + tok + "_Expresion Suma\" -> " + t1;
            ast += "\n\"" + tok + "_Expresion Suma\" -> " + f1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T1",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T1 ::= T1 MENOS F1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Resta\";\n";
            ast += "\n\"" + tok + "_Expresion Resta\" -> " + t1;
            ast += "\n\"" + tok + "_Expresion Resta\" -> " + f1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T1",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T1 ::= T1 OR F1 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Or\";\n";
            ast += "\n\"" + tok + "_Expresion Or\" -> " + t1;
            ast += "\n\"" + tok + "_Expresion Or\" -> " + f1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T1",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T1 ::= F1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = f1;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T1",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F1 ::= F1 ASTERISCO G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Multiplicacion\";\n";
            ast += "\n\"" + tok + "_Expresion Multiplicacion\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Multiplicacion\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F1 ::= F1 DIVISION G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Division\";\n";
            ast += "\n\"" + tok + "_Expresion Division\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Division\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F1 ::= F1 PREGUNTA F1 DOSPUNTOS G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Condicional\";\n";
            ast += "\n\"" + tok + "_Expresion Condicional\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Condicional\" -> " + f2;
            ast += "\n\"" + tok + "_Expresion Condicional\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F1 ::= F1 IGUALIGUAL G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Igualdad\";\n";
            ast += "\n\"" + tok + "_Expresion Igualdad\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Igualdad\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F1 ::= F1 DIFERENTE IGUAL G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Diferencia\";\n";
            ast += "\n\"" + tok + "_Expresion Diferencia\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Diferencia\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F1 ::= F1 MENOR G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Menor\";\n";
            ast += "\n\"" + tok + "_Expresion Menor\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Menor\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F1 ::= F1 MENOR IGUAL G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Menor Igual\";\n";
            ast += "\n\"" + tok + "_Expresion Menor Igual\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Menor Igual\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F1 ::= F1 MAYOR G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Mayor\";\n";
            ast += "\n\"" + tok + "_Expresion Mayor\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Mayor\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F1 ::= F1 MAYOR IGUAL G1 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Mayor Igual\";\n";
            ast += "\n\"" + tok + "_Expresion Mayor Igual\" -> " + f1;
            ast += "\n\"" + tok + "_Expresion Mayor Igual\" -> " + g1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F1 ::= G1 
            {
              String RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = g1;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F1",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // G1 ::= NUMEROS 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            token++;
            String ast = "\""+ Integer.toString(token) + "_Num\";\n";
            ast += "\n\"" + Integer.toString(token) + "_Num\" -> \"" + tok + "_" + num + "\";\n";
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // G1 ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            token++;
            String ast = "\""+ Integer.toString(token) + "_Caracter\";\n";
            ast += "\n\"" + Integer.toString(token) + "_Caracter\" -> \"" + tok + "_" + car + "\";\n";
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // G1 ::= id H1 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "";
            if (h1 != "") {
              token++;
              String tok = Integer.toString(token);
              if (h1.equals("++")) {
                ast += "\"" + tok + "_Auto Incremento\";\n";
                ast += "\n\"" + tok + "_Auto Incremento\" -> " + id2;
              } else if (h1.equals("--")) {
                ast += "\"" + tok + "_Auto Decremento\";\n";
                ast += "\n\"" + tok + "_Auto Decremento\" -> " + id2;
              } else {
                ast += "\"" + tok + "_Llamada Funcion\";\n";
                ast += "\n\"" + tok + "_Llamada Funcion\" -> " + id2;
                if (h1 != ".") {
                    ast += "\n\"" + tok + "_Llamada Funcion\" -> " + h1;
                }
              }
            } else {
              ast += id2;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // G1 ::= PARIZQ I1 PARDER 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion Parentesis\";\n";
            ast += "\n\"" + tok + "_Expresion Parentesis\" -> " + i1;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // G1 ::= ASTERISCO id 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Apuntador\";\n";
            ast += "\n\"" + tok + "_Apuntador\" -> " + id2;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // G1 ::= AMP id 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Ampersand\";\n";
            ast += "\n\"" + tok + "_Ampersand\" -> " + id2;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G1",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H1 ::= MASMAS 
            {
              String RESULT =null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String mm = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = mm;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("H1",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // H1 ::= MENOSMENOS 
            {
              String RESULT =null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String mm = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = mm;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("H1",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // H1 ::= PARIZQ E4 PARDER 
            {
              String RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
            String ast = ".";
            if (e4 != "") {
                ast = e4;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("H1",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // H1 ::= 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("H1",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= supertipo id T2 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "\"" + Integer.toString(token) + "_Asignacion\";\n";
            ast += "\n\"" + Integer.toString(token) + "_Asignacion\" -> " + t;
            ast += "\n\"" + Integer.toString(token) + "_Asignacion\" -> " + id2;
            ast += t2;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E2",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T2 ::= COMA F2 T2 
            {
              String RESULT =null;
		int f2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "\n\"" + Integer.toString(token) + "_Asignacion\" -> " + f2;
            ast += t2;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T2",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T2 ::= 
            {
              String RESULT =null;
		
            token++;
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T2",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F2 ::= tipo1 id 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "";
            if (t1 != "") {
                token++;
                String tok = Integer.toString(token);
                ast += "\"" + tok + "_Apuntador\";\n";
                ast += "\n\"" + tok + "_Apuntador\" -> " + id2;
            } else {
                ast += id2;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F2",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E3 ::= F3 G3 
            {
              String RESULT =null;
		int f3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String f3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int g3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "\"" + Integer.toString(token) + "_Parametros\";\n";
            ast += "\n\"" + Integer.toString(token) + "_Parametros\" -> " + f3;
            ast += g3;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E3",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E3 ::= 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E3",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // F3 ::= supertipo T3 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "";
            if (t3 != "") {
                ast += "\"" + tok + "_Compuesto\";\n";
                ast += "\n\"" + tok + "_Compuesto\" -> " + st;
                ast += "\n\"" + tok + "_Compuesto\" -> " + t3;
            } else {
                ast += "\"" + tok + "_Simple\";\n";
                ast += "\n\"" + tok + "_Simple\" -> " + st;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F3",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // T3 ::= id 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = id2;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T3",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // T3 ::= 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T3",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // G3 ::= COMA F3 G3 
            {
              String RESULT =null;
		int f3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String f3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int g3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int g3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String g3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "\"" + Integer.toString(token) + "_Parametros\";\n";
            ast += "\n\"" + Integer.toString(token) + "_Parametros\" -> " + f3;
            ast += g3;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G3",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // G3 ::= 
            {
              String RESULT =null;
		
            token++;
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("G3",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E4 ::= E1 T4 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String tok = Integer.toString(token);
            String ast = "\""+ tok + "_Parametros\";\n";
            ast += "\n\"" + tok + "_Parametros\" -> " + e1;
            ast += t4;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E4",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E4 ::= 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E4",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // T4 ::= COMA E1 T4 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String tok = Integer.toString(token);
            String ast = "\n\"" + tok + "_Parametros\" -> " + e1;
            ast += t4;
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T4",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // T4 ::= 
            {
              String RESULT =null;
		
            token++;
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T4",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= asignacion declaracion 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                          token--;
                          declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + asig;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= declaracion2 
            {
              String RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      RESULT = d2;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion2 ::= if declaracion2 
            {
              String RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String if1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + if1;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion2 ::= for declaracion2 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + f1;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion2 ::= while declaracion2 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + w1;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion2 ::= expresion PUNTOYCOMA declaracion2 
            {
              String RESULT =null;
		int expreleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String expre = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                          token--;
                          declaraciones--;
                        }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + expre;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion2 ::= printf declaracion2 
            {
              String RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + pf;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion2 ::= scanf declaracion2 
            {
              String RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String sf = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + sf;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion2 ::= llamada declaracion2 
            {
              String RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String ll = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      if (declaraciones > 0) {
                        token--;
                        declaraciones--;
                      }
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + ll;
                      ast += d;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion2 ::= return 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                      token++;
                      String ast = "\"" + Integer.toString(token) + "_Declaracion\";\n";
                      ast += "\n\"" + Integer.toString(token) + "_Declaracion\" -> " + r;
                      RESULT = ast;
                      declaraciones++;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion2 ::= error declaracion 
            {
              String RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion2 ::= 
            {
              String RESULT =null;
		
                      RESULT = "";
                      declaraciones = 0;
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF PARIZQ E1 PARDER LLAVEIZQ declaracion2 LLAVEDER else 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String els = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_If\";\n";
            ast += "\n\"" + tok + "_If\" -> " + e1;
            ast += "\n\"" + tok + "_If\" -> " + d;
            if (els != "") { 
              ast += "\n\"" + tok + "_If\" -> " + els;   
            }     
            RESULT = ast;       
            declaraciones = 0;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else ::= ELSE LLAVEIZQ declaracion2 LLAVEDER 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
              token++;
              String ast = "\"" + Integer.toString(token) + "_Else\";\n";
              ast += "\n\"" + Integer.toString(token) + "_Else\" -> " + d;
              RESULT = ast;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else ::= 
            {
              String RESULT =null;
		
              RESULT = "";
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for ::= FOR PARIZQ expresion PUNTOYCOMA E1 PUNTOYCOMA for2 PARDER LLAVEIZQ declaracion2 LLAVEDER 
            {
              String RESULT =null;
		int expre1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int expre1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		String expre1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int expre2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int expre2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String expre2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int expre3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int expre3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String expre3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
              token++;
              String tok =  Integer.toString(token);
              String ast = "\"" + tok + "_For\";\n";
              ast += "\n\"" + tok + "_For\" -> " + expre1;
              ast += "\n\"" + tok + "_For\" -> " + expre2;
              ast += "\n\"" + tok + "_For\" -> " + expre3;
              ast += "\n\"" + tok + "_For\" -> " + d;
              RESULT = ast;    
              declaraciones = 0;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for2 ::= expresion 
            {
              String RESULT =null;
		int expreleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String expre = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              RESULT = expre;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for2",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for2 ::= E1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              RESULT = e1;
          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for2",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while ::= WHILE PARIZQ E1 PARDER LLAVEIZQ declaracion2 LLAVEDER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                token++;
                String tok =  Integer.toString(token);
                String ast = "\"" + tok + "_While\";\n";
                ast += "\n\"" + tok + "_While\" -> " + e1;
                ast += "\n\"" + tok + "_While\" -> " + d;
                RESULT = ast;     
                declaraciones = 0;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // printf ::= PRINTF PARIZQ COMILLADOBLE cadena printf2 PARDER PUNTOYCOMA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                token++;
                String ast = "\"" + Integer.toString(token) + "_Printf\";\n";
                ast += "\n\"" + Integer.toString(token) + "_Printf\" -> " + ca;
                if (p2 != "") {
                    ast += "\n\"" + Integer.toString(token) + "_Printf\" -> " + p2;
                }
                RESULT = ast;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // printf2 ::= COMA tipo1 id 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                String ast = "";
                if (t1.equals("*")) {
                    token++;
                    String tok = Integer.toString(token);
                    ast += "\"" + tok + "_Apuntador\";\n";
                    ast += "\n\"" + tok + "_Apuntador\" -> " + id2;
                } else {
                    ast += id2;
                }
                RESULT = ast;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("printf2",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // printf2 ::= COMA NUMEROS 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                token++;
                String tok = Integer.toString(token);
                token++;
                String ast = "\""+ Integer.toString(token) + "_Num\";\n";
                ast += "\n\"" + Integer.toString(token) + "_Num\" -> \"" + tok + "_" + num + "\";\n";
                RESULT = ast;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("printf2",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // printf2 ::= COMA CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                token++;
                String tok = Integer.toString(token);
                token++;
                String ast = "\""+ Integer.toString(token) + "_Caracter\";\n";
                ast += "\n\"" + Integer.toString(token) + "_Caracter\" -> \"" + tok + "_" + car + "\";\n";
                RESULT = ast;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("printf2",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // printf2 ::= 
            {
              String RESULT =null;
		
                RESULT = "";
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("printf2",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cadena ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                token++;
                String tok = Integer.toString(token);
                token++;
                String ast = "\""+ Integer.toString(token) + "_Cadena\";\n";
                ast += "\n\"" + Integer.toString(token) + "_Cadena\" -> \"" + tok + "_" + ca + "\";\n";
                RESULT = ast;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cadena",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // scanf ::= SCANF PARIZQ COMILLADOBLE cadena COMA scanf2 PARDER PUNTOYCOMA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                token++;
                String tok =  Integer.toString(token);
                String ast = "\"" + tok + "_Scanf\";\n";
                ast += "\n\"" + tok + "_Scanf\" -> " + ca;
                ast += "\n\"" + tok + "_Scanf\" -> " + s2;
                RESULT = ast;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("scanf",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // scanf2 ::= scanf3 id 
            {
              String RESULT =null;
		int s3left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            String ast = "";
            if (s3.equals("&")) {
                token++;
                String tok = Integer.toString(token);
                ast += "\"" + tok + "_Ampersand\";\n";
                ast += "\n\"" + tok + "_Ampersand\" -> " + id2;
            } else {
                ast += id2;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("scanf2",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // scanf3 ::= AMP 
            {
              String RESULT =null;
		int ampleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int ampright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String amp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            RESULT = amp;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("scanf3",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // scanf3 ::= 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("scanf3",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamada ::= id PARIZQ E4 PARDER PUNTOYCOMA 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
            token++;
            String tok =  Integer.toString(token);
            String ast = "\"" + tok + "_Llamada Funcion\";\n";
            ast += "\n\"" + tok + "_Llamada Funcion\" -> " + id1;
            if (e4 != "") {
                ast += "\n\"" + tok + "_Llamada Funcion\" -> " + e4;
            }
            RESULT = ast;
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("llamada",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return ::= RETURN E1 PUNTOYCOMA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                token++;
                String tok =  Integer.toString(token);
                String ast = "\"" + tok + "_Return\";\n";
                ast += "\n\"" + tok + "_Return\" -> " + e1;
                RESULT = ast;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion2 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
            token++;
            String tok = Integer.toString(token);
            String ast = "\"" + tok + "_Expresion\";\n";
            ast += "\n\"" + tok + "_Expresion\" -> " + e2;
            RESULT = ast; 
        
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion2 ::= id IGUAL I1 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                token++;
                String tok = Integer.toString(token);
                String ast = "\"" + tok + "_Expresion Asignacion\";\n";
                ast += "\n\"" + tok + "_Expresion Asignacion\" -> " + id2;
                ast += "\n\"" + tok + "_Expresion Asignacion\" -> " + i1;
                RESULT = ast;
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion2",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacion ::= E2 PUNTOYCOMA 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                    RESULT = e2;
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignacion",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
